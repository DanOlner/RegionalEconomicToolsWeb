[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "UK regional economics tools, analysis and ideas",
    "section": "",
    "text": "A repository of tools, methods and ideas for analysing UK regional economic data, mainly from official ONS sources.\nWith the aim of:\nSupporting policymakers to more clearly see what’s happening in their regional economies, what their history is, how they compare to other places in the UK, and what the main method issues are when interpreting the data.\nHelping to build capacity ‘in-house’ so regional policymakers can become more self-reliant (see Centre for Cities’ report LA Evidential for excellent analysis of how to overcome barriers to regional capacity building.)\nThis is a live document and will continue to grow in dialogue with its users.\n\nCurrent website content (see table of content links on the left):\n\nGDP and GVA:\n\nGDP / GVA regional gaps in the UK: analysis and R code for comparing different types of economic gap between places, showing what difference choice of data makes.\nBeatty & Fothergill analysis of productivity: visualisations based on the CRESR report ‘Productivity of Industry and Places’, showing how much the economic gap between places changes depending on a range of data choices.\n\nSectors:\n\nLQ and proportion plots: code and method showing how to analysis sectoral composition in regions and how they compare to other places, using location quotients, mapping and ‘proportion plots’ that get under the skin of what LQs are showing.\n\n\nThis project was funded by Y-PERN and supported SYMCA’s Plan for Good Growth and Skills Strategy 2024.\nAny questions, please do get in touch via the issues tab on the github repo of this website or email: danolner at gmail dot com or d dot olner at sheffield.ac.uk."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "gdp_gaps.html",
    "href": "gdp_gaps.html",
    "title": "GDP/GVA regional gaps in the UK",
    "section": "",
    "text": "We can get regional GVA/GDP data in a range of different flavours. Take a look at the page examining data from Beatty & Fothergill’s work on this, showing what difference choice of measure makes.\nOn this page, we’ll look at two GVA measures: GVA per hour worked and GVA per capita / per head of population. The code here compares South Yorkshire with the rest of the UK; it’s easy to adapt to other regions.\nThese two are a useful contrast for thinking about how interventions might change them, if we hope to improve productivity or output. For example, successfully moving people from inactivity into work (into most likely below average pay jobs) or creating new jobs that are below average productivity per hour, will lower the ‘GVA per hour’ number but increase GVA per capita.\n[To do: interactive dropdowns for different regions, possibly in Shiny]\nLet’s start with one of the most common measures of regional productivity, GVA per hour worked. Information on data sources is in the code comments, but note that the hourly work data comes from the Annual Population Survey and Labour Force Survey (see ‘measuring the data’ here at ONS). ONS say in their June 2023 analysis of this data:\n\n“Output per hour worked is the preferred measure of labour productivity, as hours worked are a more precise measure of labour input than jobs.”\n\nAlso here:\n\n“GVA per hour worked is considered a more comprehensive indicator of labour productivity and the preferred measure at subnational level. This is because GVA per filled job does not take into consideration regional labour market structures or different working patterns, such as the mix of part-time and full-time workers, industry structure and job shares.”\n\nFirst, the libraries we’ll use (and setting scipen to avoid any scientific notation):\n\nlibrary(tidyverse)\nlibrary(zoo)\nlibrary(sf)\nlibrary(tmap)\nlibrary(plotly)\noptions(scipen = 99)\n\nThen load in the data for both ITL2 and ITL3 regions:\n\n#ONS link to the Excel sheets: https://www.ons.gov.uk/economy/grossdomesticproductgdp/datasets/regionalgrossdomesticproductallnutslevelregions\n#Data folder name of downloaded Excel sheets (from which the CSVs below have been exported)\n#itlproductivity.xlsx\nperhourworked &lt;- read_csv('data/Table A4 Current Price unsmoothed GVA B per hour worked £ ITL2 and ITL3 subregions 2004 to 2021.csv') %&gt;% \nrename(ITL = `ITL level`, ITLcode = `ITL code`, region = `Region name`) %&gt;% \n  filter(ITL == 'ITL2') %&gt;% \n  pivot_longer(cols = `2004`:`2021`, names_to = 'year', values_to = 'gva') %&gt;% \n  mutate(year = as.numeric(year))\n\n#Repeat for ITL3\nperhourworked.itl3 &lt;- read_csv('data/Table A4 Current Price unsmoothed GVA B per hour worked £ ITL2 and ITL3 subregions 2004 to 2021.csv') %&gt;% \n  rename(ITL = `ITL level`, ITLcode = `ITL code`, region = `Region name`) %&gt;% \n  filter(ITL == 'ITL3') %&gt;% \n  pivot_longer(cols = `2004`:`2021`, names_to = 'year', values_to = 'gva') %&gt;% \n  mutate(year = as.numeric(year))\n\nAs the file names say, this is GVA per hour worked in current prices. That is, it’s the actual money amount for that specific ‘current’ year (2004 to 2021 in this data) - so it’s not inflation adjusted.\nGVA/GDP data comes in either current prices (CP) or chained volume (CV) numbers. CV data has been inflation-adjusted so that change over time can be looked at - but the adjustment is done for each region separately, meaning that the difference in scale between places will be slightly off. (You can check this in e.g. the sector data by summing the CV values for regions and noting that it does not match the total for the larger geographies they’re a part of.)\nIn practice, this means it’s best to use current prices data to compare between places and chained volume / inflation adjusted numbers to look at how specific places’ GVA/GDP changes over time.\nHowever, it is possible to examine change over time in the current prices data if we just examine relative change, either in how proportions change or - as the next code block does - in how the rank position of places changes.\nThe following code:\n\nFinds rank position of all places over time\nTakes a moving 3 year average of that rank to smooth a bit\nLabels different parts of the UK - North, South, London, South apart from London\nMakes an interactive plot of the rank change over time (comparing the years after coalition govt and most recent years before COVID) with South Yorkshire highlighted\n\n\n#Rank to see which ITL2 changed position the most\nperhourworked &lt;- perhourworked %&gt;% \n  group_by(year) %&gt;% \n  mutate(rank = rank(gva))\n\n#3 year smoothing\nperhourworked &lt;- perhourworked %&gt;% \n  arrange(year) %&gt;% \n  group_by(region) %&gt;%\n  mutate(\n    movingav = rollapply(gva,3,mean,align='center',fill=NA),\n    rank_movingav = rollapply(rank,3,mean,align='center',fill=NA),\n    rank_movingav_7yr = rollapply(rank,7,mean,align='center',fill=NA)\n    )\n\n#Picking out England and North etc...\n#Via https://github.com/DanOlner/regionalGVAbyindustry\n\n#Northern England\nnorth &lt;- perhourworked$region[grepl('Greater Manc|Merseyside|West Y|Cumbria|Cheshire|Lancashire|East Y|North Y|Tees|Northumb|South Y', perhourworked$region, ignore.case = T)] %&gt;% unique\n\n#South England\nsouth &lt;- perhourworked$region[!grepl('Greater Manc|Merseyside|West Y|Cumbria|Cheshire|Lancashire|East Y|North Y|Tees|Northumb|South Y|Scot|Highl|Wales|Ireland', perhourworked$region, ignore.case = T)] %&gt;% unique\n\n#South minus London\nsouth.minus.london &lt;- south[!grepl('london',south,ignore.case = T)]\n\n#England!\nengland &lt;- c(north,south)\n\n#England minus London\nengland.minus.london &lt;- england[!grepl('london',england,ignore.case = T)]\n\n#UK minus London\nuk.minus.london &lt;- perhourworked$region[!grepl('london',perhourworked$region,ignore.case = T)] %&gt;% unique\n\n#Add those regions into the per hour worked data\nperhourworked &lt;- perhourworked %&gt;% \n  mutate(ns_england_restofUK = case_when(\n    region %in% north ~ 'North England',\n    region %in% south ~ 'South Eng (inc. London)',\n    .default = 'Scot/Wales/NI'\n  ))\n\nperhourworked &lt;- perhourworked %&gt;% \n  mutate(ns_england_restofUK_londonseparate = case_when(\n    region %in% north ~ 'North England',\n    region %in% south.minus.london ~ 'South Eng (exc. London)',\n    grepl('london',region,ignore.case = T) ~ 'London',\n    .default = 'Scot/Wales/NI'\n  ))\n\n#And a category for 'UK minus London'\nperhourworked &lt;- perhourworked %&gt;% \n  mutate(UK_minus_london = case_when(\n    grepl('london',region,ignore.case = T) ~ 'London',\n    .default = 'UK minus London'\n  ))"
  },
  {
    "objectID": "sector_locationquotients_and_proportions.html",
    "href": "sector_locationquotients_and_proportions.html",
    "title": "UK sectors: LQs & proportion plots",
    "section": "",
    "text": "The ONS produces an Excel document with GVA data at three different geographical scales, ITL1 to ITL3. Wikipedia has an excellent explanation with maps of the ITL regions.\nIT2 level data includes several zones that match existing mayoral authorities. ITL3 data has zones matching local authorities - but neither perfectly. Some are grouped. For example, ITL3 zones in South Yorkshire separate Sheffield from the other three local authorities in South Yorkshire grouped into one zone (Rotherham, Barnsley, Doncaster).\nHere, we’ll explore some ways to analyse this data using R. The data has been processed to make it more useable in R - see the process_from_excel.R script and its comments for an explanation of how to get from the Excel sheet to the datasets used here. All of the derived files (and the original ONS excel sheet downloaded from the above page, current version dated 25th April 2023) are included in this repository in the data folder.\nWe’ll look at the current prices data, not the chained volume data. We’ll be making location quotients, which require being able to sum different regions in different ways; chained volume measures can’t be summed. Current price data (prices at the time point of the data) can’t be used to measure nominal growth as it’s not inflation adjusted, but as long as we’re working with proportional change over time (which as we’ll see, LQs are), they’re fine.\nThe code is available in a single script in the GVAcode.R file.\n\n\nFirst, load the libraries we’ll be using, and get the ITL2 level data. (If you haven’t already, install the libraries/packages with e.g. install.packages(\"tidyverse\") before loading here.) Also, load some functions that include an LQ function.\n\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(tmap)\nlibrary(plotly)\nlibrary(zoo)#For moving average function\nlibrary(ggrepel)#For self-adjusting plot labels\nsource('functions/misc_functions.R')\noptions(scipen = 99)#Avoids scientific notation\n\nitl2.cp &lt;- read_csv('data/ITL2currentprices_long.csv')\n\nIn this dataframe, we have: ITL2 regions, SIC sectors and year - ranging from 1998 to 2021 in the current data - and finally the current price GVA value.\nThen we’ll find the location quotients for the whole dataset. The Excel sheet here from the ONS has an excellent explanation of location quotients in its notes, I won’t repeat all of that here. But a quick word on what the location quotient is showing for this data:\n\nThe location quotient gives a measure of concentration for sectors (both within regions and across them, see below) when compared to a larger geography (the UK in this case).\nThe LQ is found easily: it’s the ratio of two ratios - the proportion of a sector in region x, over the proportion of that sector in the UK as a whole.\nIf the LQ &gt; 1, that industry is relatively more concentrated in the region, compared to the UK.\nIf the LQ &lt; 1, that industry is relatively less concentrated in the region, compared to the UK.\nWe’re looking at raw GVA values here - the total GVA value of a particular sector in a region tells us something about that region’s economic structure. But it can’t directly be used to say anything definitive about productivity, since we don’t know e.g. if that GVA value is due to high productivity workers, or just a very large but lower productivity sector.\nLQs are good for getting a structural overview, but their biggest weakness is that a regional sector can be proportionally larger than the UK, but itself quite small. So a region’s top LQ sector may still be a tiny part of its overall economy. We’ll look at a way to overcome that weakness below.\nAs the ONS Excel sheet on LQs make really clear, because (A/B)/(C/D) is equivalent to (A/C)/(B/D), the LQ actually captures two related ways of seeing the same thing: how relatively concentrated sectors are across a whole geography like the UK, and how concentrated within a subgeography like South Yorkshire they are. (See the table in the ONS document - numbers which can be read either across geographies or across sectors.)\n\nThe LQ function takes in a dataframe, the name of the region column, the name of the sector column and the name of the value column to find the LQ for. It returns the same dataframe with the LQ and region and total proportions added (we’ll need those proportions later), as well the LQ logged, which will help with plotting (as the log makes plus/minus 1 values symmetric).\nFirst, here’s the function working on a single year in the data, to illustrate what the function takes in.\n\nlq1998 &lt;- add_location_quotient_and_proportions(\n  df = itl2.cp %&gt;% filter(year == 1998),\n  regionvar = ITL_region_name,\n  lq_var = SIC07_description,\n  valuevar = value\n)\n\nLet’s repeat that for all years and replace the original dataframe with the result.\n\nitl2.cp &lt;- itl2.cp %&gt;% \n  split(.$year) %&gt;% \n  map(add_location_quotient_and_proportions, \n      regionvar = ITL_region_name,\n      lq_var = SIC07_description,\n      valuevar = value) %&gt;% \n  bind_rows()\n\nTaking a quick look at the resulting LQs, this is top ten LQ sectors for South Yorkshire, showing which sectors have relatively larger proportions of GVA in South Yorkshire compared to the UK as a whole.\nNote we can see the point made above about relative LQ concentration not capturing actual scale. ‘Manufacture of basic metals’ has 5 times the GVA concentration of the UK as a whole, but its regional percent of GVA is only 1.28%. This is reflecting that this sector is generally small everywhere, just larger in South Yorkshire. Contrast with ‘Education’ - still a higher relative proportion than the UK with an LQ of 1.7, but it’s actually nearly 11% of South Yorkshire’s GVA.\n\nitl2.cp %&gt;% filter(\n  ITL_region_name == 'South Yorkshire',\n  year == 2021\n  ) %&gt;% \n  mutate(regional_percent = sector_regional_proportion *100) %&gt;% \n  select(SIC07_description,regional_percent, LQ) %&gt;% \n  arrange(-LQ) %&gt;% \n  slice(1:10)\n\n# A tibble: 10 × 3\n   SIC07_description                                  regional_percent    LQ\n   &lt;chr&gt;                                                         &lt;dbl&gt; &lt;dbl&gt;\n 1 Manufacture of basic metals                                   1.28   5.14\n 2 Manufacture of furniture                                      0.780  3.17\n 3 Manufacture of fabricated metal products                      2.21   2.79\n 4 Other manufacturing                                           0.694  2.53\n 5 Manufacture of other non-metallic mineral products            0.835  2.39\n 6 Manufacture of rubber and plastic products                    1.02   2.39\n 7 Manufacture of electrical equipment                           0.576  1.95\n 8 Motor trades                                                  2.52   1.80\n 9 Education                                                    10.8    1.70\n10 Telecommunications                                            2.69   1.64\n\n\nRepeating that for Greater Manchester, where none of the LQ top ten are especially large percentages of its GVA:\n\nitl2.cp %&gt;% filter(\n  ITL_region_name == 'Greater Manchester',\n  year == 2021\n  ) %&gt;% \n  mutate(regional_percent = sector_regional_proportion *100) %&gt;% \n  select(SIC07_description,regional_percent, LQ) %&gt;% \n  arrange(-LQ) %&gt;% \n  slice(1:10)\n\n# A tibble: 10 × 3\n   SIC07_description                                     regional_percent    LQ\n   &lt;chr&gt;                                                            &lt;dbl&gt; &lt;dbl&gt;\n 1 Manufacture of textiles                                          0.732  3.47\n 2 Sports, amusement and recreation activities                      0.979  1.71\n 3 Warehousing and transport support activities                     2.11   1.64\n 4 Manufacture of rubber and plastic products                       0.687  1.61\n 5 Travel agency and tour operator activities                       0.528  1.59\n 6 Office administration and business support activities            1.85   1.50\n 7 Manufacture of food products                                     1.62   1.47\n 8 Manufacture of wood and paper products                           0.573  1.38\n 9 Repair of computers, personal and household goods                0.162  1.33\n10 Telecommunications                                               2.16   1.32\n\n\nLiverpool City Region has three public-sector-heavy SICs in its LQ top ten:\n\nitl2.cp %&gt;% filter(\n  ITL_region_name == 'Merseyside',\n  year == 2021\n  ) %&gt;% \n  mutate(regional_percent = sector_regional_proportion *100) %&gt;% \n  select(SIC07_description,regional_percent, LQ) %&gt;% \n  arrange(-LQ) %&gt;% \n  slice(1:10)\n\n# A tibble: 10 × 3\n   SIC07_description                                      regional_percent    LQ\n   &lt;chr&gt;                                                             &lt;dbl&gt; &lt;dbl&gt;\n 1 Manufacture of motor vehicles                                     1.96   2.89\n 2 Manufacture of petroleum, chemicals and pharmaceutica…            4.20   2.50\n 3 Manufacture of other non-metallic mineral products                0.770  2.20\n 4 Human health activities                                          12.0    1.91\n 5 Gambling and betting activities                                   0.467  1.86\n 6 Sports, amusement and recreation activities                       1.04   1.81\n 7 Security and investigation activities                             0.323  1.49\n 8 Public administration and defence                                 7.19   1.39\n 9 Warehousing and transport support activities                      1.72   1.34\n10 Land transport                                                    1.40   1.32\n\n\nAs mentioned, the LQ has a handy bonus feature: it can be used either to compare sectors within subregions, as above, or - looking at individual sectors - to see how geographical concentration differs.\nSectors with the highest difference across places in the UK will have a higher spread between their min and max LQ values. Some sectors - often public sectors - are fairly evenly spread everywhere. Here we find the spread and pick out the top five most geographically varied:\n\n#Find the geographical variation of sectors using the LQ spread\nLQspread &lt;- itl2.cp %&gt;% \n  filter(year == 2021) %&gt;% \n  group_by(SIC07_description) %&gt;% \n  summarise(LQ_spread = diff(range(LQ))) %&gt;% \n  arrange(-LQ_spread)\n\n#Show top 5\nLQspread[1:5,]\n\n# A tibble: 5 × 2\n  SIC07_description                             LQ_spread\n  &lt;chr&gt;                                             &lt;dbl&gt;\n1 Forestry and fishing                              41.5 \n2 Mining and quarrying                              35.4 \n3 Manufacture of beverages and tobacco products     15.4 \n4 Manufacture of basic metals                       10.8 \n5 Manufacture of other transport equipment           9.77\n\n\nThat can then be used to pick out particular sectors to map. For example, South Yorshire’s most concentrated GVA sector - manufacture of basic metals - is also the UK’s fourth most varied sector, and looks like this across the UK (note South Yorkshire doesn’t top the most concentrated for this sector).\nThe geographical pattern is very clear. (Greener colours are more concentrated than the UK as whole; redder colours less so.)\nThe map shapefiles are included in this repo, and can also be downloaded from geoportal.statistics.gov.uk.\n\n#Load ITL2 map data using the sf library\nitl2.geo &lt;- st_read('data/ITL_geographies/International_Territorial_Level_2_January_2021_UK_BFE_V2_2022_-4735199360818908762/ITL2_JAN_2021_UK_BFE_V2.shp', quiet = T) %&gt;% \n  st_simplify(preserveTopology = T, dTolerance = 100)\n\n#Join map data to a subset of the GVA data\nsector_LQ_map &lt;- itl2.geo %&gt;% \n  right_join(\n    itl2.cp %&gt;% filter(\n      year==2021,\n      SIC07_description == LQspread$SIC07_description[4]#picking out the fourth highest geographical spread sector\n      ),\n    by = c('ITL221NM'='ITL_region_name')\n  )\n\n\n#Plot map\ntm_shape(sector_LQ_map) +\n  tm_polygons('LQ_log', n = 9) +\n  tm_layout(title = 'LQ spread of\\nBasic metals\\nAcross ITL2 regions', legend.outside = T)\n\n\n\n\n\n\n\nNow onto plotting LQs themselves. To do this, we’ll add in a measure of what the change/growth trends for LQs are, for each sector in each ITL2 zone. This next function adds in some ordinary least squares slopes for LQ change over time, to get a sense of the growth trends. LQ_log is used so that slope scale is the same for different size sectors, so their trends are comparable. (It returns zero for any region/sector combinations with no data at all.)\n\n#Use\n#LQ_slopes %&gt;% filter(slope==0)\n#To see which didn't get slopes (only 8 rows in the current data)\nLQ_slopes &lt;- compute_slope_or_zero(\n  data = itl2.cp, \n  ITL_region_name, SIC07_description,#slopes will be found within whatever grouping vars are added here\n  y = LQ_log, x = year)\n\nWe’ll plot data for a single year, but include that information about how LQ has changed over the full range of the data from 1998 to 2021.\nThe following code does three things:\n\nFilters down to a single year and keeps in yeartoplot.\nJoins the LQ-over-time slopes to this single year, so we can see what the trends were in the rest of the time range for each place and sector\nFinds the minimum and maximum LQ values for the entire data range, for each place and year (this is explained more below when looking at a plot) and adds this to yeartoplot.\n\n\n#Filter down to a single year\nyeartoplot &lt;- itl2.cp %&gt;% filter(year == 2021)\n\n#Add slopes into data to get LQ plots\nyeartoplot &lt;- yeartoplot %&gt;% \n  left_join(\n    LQ_slopes,\n    by = c('ITL_region_name','SIC07_description')\n  )\n\n#Get min/max values for LQ over time as well, for each sector and place, to add as bars so range of sector is easy to see\nminmaxes &lt;- itl2.cp %&gt;% \n  group_by(SIC07_description,ITL_region_name) %&gt;% \n  summarise(\n    min_LQ_all_time = min(LQ),\n    max_LQ_all_time = max(LQ)\n  )\n\n#Join min and max\nyeartoplot &lt;- yeartoplot %&gt;% \n  left_join(\n    minmaxes,\n    by = c('ITL_region_name','SIC07_description')\n  )\n\nWe then pick a place to take an initial look at - Liverpool City Region (LCR) (which is Merseyside in the ITL2 data). This will be the main place on the plot, with others to compare to. We also order the sectors by LCR’s LQ, so they’re ordered in the plots by LCR.\n\nplace = 'Merseyside'\n\n#Get a vector with sectors ordered by the place's LQs, descending order\n#Use this next to factor-order the SIC sectors\nsectorLQorder &lt;- itl2.cp %&gt;% filter(\n  ITL_region_name == place,\n  year == 2021\n) %&gt;% \n  arrange(-LQ) %&gt;% \n  select(SIC07_description) %&gt;% \n  pull()\n\n#Turn the sector column into a factor and order by LCR's LQs\nyeartoplot$SIC07_description &lt;- factor(yeartoplot$SIC07_description, levels = sectorLQorder, ordered = T)\n\nA plot for all sectors is a little unwieldy, though interesting to get an overiew. You can view it here. (The plot code below will produce this full plot if you don’t filter first.)\nInstead, let’s look just at LCR sectors where LQ is more than 1 - that is, sectors that have relatively higher GVA in LCR compared to the rest of the UK. First, find sectors in LCR that are LQ &gt; 1, then use that to get those sectors for all places, so we can compare LCR to those places.\nNote the commented out line - there are other useful things to filter by, e.g. if we want only sectors where the LQ had grown relatively over the time range (slope &gt; 1).\n\n# Reduce to SY LQ 1+\nlq.selection &lt;- yeartoplot %&gt;% filter(\n  ITL_region_name == place,\n  # slope &gt; 1,#LQ grew relatively over time\n  LQ &gt; 1\n  )\n\n#Keep only sectors that were LQ &gt; 1 from the main plotting df\nyeartoplot &lt;- yeartoplot %&gt;% filter(\n  SIC07_description %in% lq.selection$SIC07_description\n)\n\nNow we can plot. The plot functions do two things:\n\nThe first function (LQ_baseplot) begins the plot by adding all places (faintness controlled by the alpha value). We also have the option of not including this by setting alpha to zero, but it still functions as the base plot initialisation, so always use.\nThe function addplacename_to_LQplot can be used repeatedly to add specific places with clearer shapes (choose shape numbers from somewhere like here).\n\n\np &lt;- LQ_baseplot(df = yeartoplot, alpha = 0.1, sector_name = SIC07_description, \n                 LQ_column = LQ, change_over_time = slope)\n\np &lt;- addplacename_to_LQplot(df = yeartoplot, placename = 'Merseyside',\n                            plot_to_addto = p, shapenumber = 16,\n                            min_LQ_all_time = min_LQ_all_time, max_LQ_all_time = max_LQ_all_time,#Range bars won't appear if either of these not included\n                            value_column = value, sector_regional_proportion = sector_regional_proportion,#Sector size numbers won't appear if either of these not included\n                            region_name = ITL_region_name,#The next four, the function needs them all \n                            sector_name = SIC07_description,\n                            change_over_time = slope, \n                            LQ_column = LQ \n                            )\n\np\n\nDetails of what’s in this plot:\n\nLQ is on the x axis, log scale so values below 1 are symmetrical. The vertical line at 1 marks where sectors are more or less concentrated than the UK as a whole (more concentrated to the right of the line, LQ &gt; 1). Liverpool City Region sector GVA location quotients are shown in the green and red circles.\nGreen circles: the LQ trend has increased over the full data range (slope &gt; 1)\nRed circles: the LQ trend has decreased over the full data range (slope &lt; 1)\nHorizontal bar-lines show the full range of the LQ for that sector across all years (more on that below).\nThe fainter background circles show all other ITL2 regions to show where LCR is relative to those. If they’re more clustered around 1, they’re less geographically varied. (Public sectors like Education tend to be evenly spread, as the plot shows.)\nOn the right hand side, figures for the raw GVA value and its percentage of LCR’s total GVA is included.\n\n\nSome things we can see in this plot:\n\nAs we saw above, manufacture of motor vehicles has LCR’s highest LQ value (2.89) means it’s close to three times more concentrated in LCR relative to the UK as a whole. It’s also got the largest green circle, so it’s trend slope is highest from this group. Note what ‘growth’ means here - if a sector’s LQ is ‘growing’, it’s relative. It could be that GVA has been relatively shrinking elsewhere (we’d need to look at GVA change over time to know - we do this below).\nMotor vehicles’ marker is also on the right of the range bar - it’s growing (relatively) and the current year’s data is close to the LQ’s all time high. (Compare to e.g. Gambling and betting - growing but it’s nowhere near its relative growth peak).\nThe GVA % number on the right also shows that motor trades is a bit less than 2% of LCR’s economy, compared to 4.2% for ‘Manufacture of petroleum, chemicals and pharmaceuticals’ - less relatively concentrated in LCR, but larger.\n‘Petroleum, chemicals and pharmaceuticals’ is also a very different relative change story - it’s always had a higher LQ in LCR (the range bars don’t cross zero) but it’s growth circle is red (sloping down) and it’s right at the bottom of the LQ range in the latest year.\n\n\nWe’ll come back to that last sector in a moment, but let’s also see how to use the plot code to compare different places more specifically.\nThe next code chunk does the following:\n\nGet the base plot, setting alpha to zero so we don’t get all places\nAdd two specific places - Greater Manchester (GM) and South Yorkshire (SY) - without including arguments for the range bars or numbers, as those should be in the final overlay of LCR.\nAdd LCR last so it appears on top.\n\nWhen comparing different regions like this, it’s helpful to note that any sector with a lower LQ is also proportionally a smaller part of that region’s economy (the LQ for a particular sector has the same denominator across all sectors, so the values here map to regional sector percentages.)\nSo for example, from this we can see:\n\nGM and SY’s motor vehicle manufacture sectors’ LQs are both below 1, and a smaller proportion of their GVA than LCR.\nSectors like rubber and plastics products, and telecoms, are both more concentrated in SY and GM.\n\n\n#Repeat but overlay other places\np &lt;- LQ_baseplot(df = yeartoplot, alpha = 0, sector_name = SIC07_description, \n                 LQ_column = LQ, change_over_time = slope)\n\np &lt;- addplacename_to_LQplot(df = yeartoplot, plot_to_addto = p, \n                            placename = 'Greater Manchester', shapenumber = 23,\n                            region_name = ITL_region_name,#The next four, the function needs them all \n                            sector_name = SIC07_description, change_over_time = slope, LQ_column = LQ)\n\np &lt;- addplacename_to_LQplot(df = yeartoplot, plot_to_addto = p, \n                            placename = 'South Yorkshire', shapenumber = 22,\n                            region_name = ITL_region_name,\n                            sector_name = SIC07_description, change_over_time = slope, LQ_column = LQ)\n\np &lt;- addplacename_to_LQplot(df = yeartoplot, plot_to_addto = p, \n                            placename = place1, shapenumber = 16,\n                            min_LQ_all_time = min_LQ_all_time,max_LQ_all_time = max_LQ_all_time,#Include minmax\n                            value_column = value, sector_regional_proportion = sector_regional_proportion,#include numbers\n                            region_name = ITL_region_name,\n                            sector_name = SIC07_description, change_over_time = slope, LQ_column = LQ)\np &lt;- p + \n  annotate(\n    \"text\",\n    label = \"Greater Manchester: diamonds\\nSouth Yorkshire: squares\",\n    x = 0.05, y = 'Manufacture of rubber and plastic products',\n    \n  )\n\np\n\n\n\n\n\nLet’s look more deeply at change over time to see what’s happening with Petroleum, chemicals and pharmaceuticals in LCR. Is it actually a shrinking proportion of LCR’s economy, or has it just grown elsewhere? The code below does three things:\n\nFilter the full dataset down to just the one sector. grepl is used to save having to use the full sector name (but watch out for multiple sectors with the same words in like ‘motor’).\nUse the zoo library’s rollapply function to get a moving average of the sector’s regional proportions, so trends are easier to see. (A moving average for LQ is also included, though we don’t use it here.)\nFlag the ITL2 region we’re interested and, in this case, just keep the top ten places where the sector had the largest GVA proportion on average for the last three years in the data.\n\nFrom this plot, we can see that, yes, petroleum and chemicals has indeed shrunk as a proportion of LCR’s economy, trending down since around 2011. Note, we could in theory plot the actual GVA values but they’re not inflation-adjusted so would be misleading. So while we can say from this data what sectors have changed proportionally, it’s possible petroleum/chemicals is shrinking due to other sectors’ relative growth in LCR.\n\n#Pick a sector to plot separately for all places\n#Use grepl as a shortcut to search for sector names\nsector &lt;- itl2.cp$SIC07_description[grepl('petroleum', itl2.cp$SIC07_description ,ignore.case = T)] %&gt;% unique\n\ntimeplot &lt;- itl2.cp %&gt;% \n  filter(SIC07_description == sector) \n\n#Use zoo's rollapply function to get a moving average\ntimeplot &lt;- timeplot %&gt;% \n  group_by(ITL_region_name) %&gt;% \n  arrange(year) %&gt;% \n  mutate(\n    LQ_movingav = rollapply(LQ,3,mean,align='right',fill=NA),\n    percent_movingav = rollapply(sector_regional_proportion * 100,3,mean,align='right',fill=NA)\n  )\n\n#Or pick top size values\n#Largest % in 2021\nlargest_percents &lt;- timeplot %&gt;% \n  filter(year == 2021) %&gt;% \n  arrange(-percent_movingav)\n\n#Keep only the top ten places and order them\ntimeplot &lt;- timeplot %&gt;% \n  mutate(ITL_region_name = factor(ITL_region_name, ordered = T, levels = largest_percents$ITL_region_name)) %&gt;% \n  filter(ITL_region_name %in% largest_percents$ITL_region_name[1:10])\n\n#Mark the ITL of interest so it can be clearer in the plot\ntimeplot &lt;- timeplot %&gt;%\n  mutate(\n    ITL2ofinterest = ifelse(ITL_region_name == place, 'ITL of interest','other'),\n  )\n\nggplot(timeplot %&gt;% \n         rename(`ITL region` = ITL_region_name) %&gt;% \n         filter(!is.na(percent_movingav)),#remove NAs from dates so the x axis doesn't show them\n       aes(x = year, y = percent_movingav, colour = `ITL region`, size = ITL2ofinterest, linetype = ITL2ofinterest, group = `ITL region`)) +\n  geom_point() +\n  geom_line() +\n  scale_size_manual(values = c(2.5,1)) +\n  scale_color_brewer(palette = 'Paired', direction = 1) +\n  ylab('Regional GVA percent') +\n  guides(size = \"none\", linetype = \"none\") +\n  ggtitle(\n    paste0(sector,'\\n', place, ' highlighted')\n      ) +\n    theme(plot.title = element_text(face = 'bold'))\n\n\n\n\nIf we want to look at all places at once, it’s useful to do two things:\n\nUse a log scale on the y axis, so change scale is comparable and we can see places with smaller sectors.\nUse plotly to make an interactive plot, so hovering over lines will show what places are interactively.\n\nThis plot does so for LCR’s largest LQ sector, manufacture of motor vehicles.\n\nsector &lt;- itl2.cp$SIC07_description[grepl('motor vehicles', itl2.cp$SIC07_description ,ignore.case = T)] %&gt;% unique\n\ntimeplot &lt;- itl2.cp %&gt;% \n  filter(SIC07_description == sector) \n\ntimeplot &lt;- timeplot %&gt;% \n  group_by(ITL_region_name) %&gt;% \n  arrange(year) %&gt;% \n  mutate(\n    LQ_movingav = rollapply(LQ,3,mean,align='right',fill=NA),\n    percent_movingav = rollapply(sector_regional_proportion * 100,3,mean,align='right',fill=NA)\n  )\n\n\ntimeplot &lt;- timeplot %&gt;%\n  mutate(\n    ITL2ofinterest = ifelse(ITL_region_name == place, 'ITL of interest','other'),\n  )\n\np &lt;- ggplot(timeplot %&gt;% \n         rename(`ITL region` = ITL_region_name) %&gt;% \n         filter(!is.na(percent_movingav)),#remove NAs from dates so the x axis doesn't show them, \n       aes(x = year, y = percent_movingav, colour = ITL2ofinterest, size = ITL2ofinterest, group = `ITL region`)) +\n  geom_point() +\n  geom_line() +\n  scale_y_log10() +\n  ylab('Regional GVA percent (log 10)') +\n  scale_size_manual(values = c(2,0.5)) +\n  scale_colour_manual(values = c('black','grey')) +\n  ggtitle(\n    paste0(sector,'\\n', place, ' highlighted')\n      ) +\n    theme(plot.title = element_text(face = 'bold'))\n\np\n\n\n\n\nIt’s easy to convert a ggplot to an interactive plotly. It can’t be included on this page, but will run in RStudio, and there’s an online version here.)\n\nggplotly(p, tooltip = c(\"ITL region\"))\n\nWe can also filter sectors by which has ‘grown’ the most, using the function above that found slopes for growth and shrinkage in the location quotient.\nRather than plotting LQ though, let’s plot % GVA again, for those 10 sectors with the largest LQ growth trend. For motor vehicle manufacture, we can see it’s actually not a very large part of LCR’s economy. (Note land/water transport and retail trade moving closely together too.)\nThis highlights again a key weakness of using LQs. Though they’re very useful for getting a sense of structure, the lack of information about actual sector scale can be a problem. We’ll look at a way to address this next.\n\n#Look just at place of interest\n#And arrange by the 'growth' slope.\nplace_slopes &lt;- yeartoplot %&gt;% \n  filter(ITL_region_name == place) %&gt;% \n  arrange(-slope)\n\n#Use that to filter the main df and order sectors by which slope is largest\ntimeplot.sectors &lt;- itl2.cp %&gt;% \n  filter(ITL_region_name == place) %&gt;% \n  mutate(SIC07_description = factor(SIC07_description, ordered = T, levels = place_slopes$SIC07_description))\n\n#Moving averages\ntimeplot.sectors &lt;- timeplot.sectors %&gt;% \n  group_by(SIC07_description) %&gt;% \n  arrange(year) %&gt;% \n  mutate(\n    LQ_movingav = rollapply(LQ,3,mean,align='right',fill=NA),\n    percent_movingav = rollapply(sector_regional_proportion * 100,3,mean,align='right',fill=NA)\n  )\n\n#Filter down to top ten LQ growth sectors\ntimeplot.sectors &lt;- timeplot.sectors %&gt;% \n  filter(\n    SIC07_description %in% place_slopes$SIC07_description[1:10]\n  )\n\n#Plot GVA percent of the largest LQ growth sectors\nggplot(timeplot.sectors %&gt;% \n         rename(Sector = SIC07_description) %&gt;% \n         filter(!is.na(percent_movingav)),#remove NAs from dates so the x axis doesn't show them\n       aes(x = year, y = percent_movingav, colour = Sector, group = Sector)) +\n  geom_point() +\n  geom_line() +\n  scale_color_brewer(palette = 'Paired', direction = 1) +\n  ylab('GVA percent') +\n  guides(size = \"none\", linetype = \"none\") +\n   ggtitle(\n    paste0('Top ten sectors by LQ growth trend\\n', place)\n      ) +\n    theme(plot.title = element_text(face = 'bold'))\n\n\n\n\n\n\n\nOne way to address the fact that LQs can be large while the actual proportion of the economy they represent can be tiny (and vice versa) is to break it down into its two component parts. As we’ve said, the LQ is the ratio of regional sector proportion over the same sector’s proportion at the larger geography. We can just plot both of those separately on each axis.\nIf we’re doing this, it also makes sense to remove the region in question when working out the sector proportions for the larger geography, so it’s not double-counted, as it is in LQs. Let’s look at a plot to explain this, using the twod_proportionplot function, which returns a ggplot object we can then add to.\nMost things going into the function are obvious, but some things to note:\n\nx_regionnames and x_regionnames can be any list of ITL2 region names. We want them to be different on each axis. In this case, Liverpool City Region is going on the x axis and the rest of the UK on the y axis (by passing in “Everything except LCR.”)\nIn this one, we pass in the earliest and latest possible years to plot. This will show very large structural change given that’s a 23 year span.\ncompasspoints_to_display: leave blank to display all the data, or here we can specify any combination of ‘SE’,‘SW’,‘NE’ and ‘NW’ compass directions. These show the following:\n\n‘NE’: sectors that grew (in GVA percent terms) for both the x and y region(s).\n‘SW’: sectors that shrunk for both the x and y region(s).\n‘SE’: sectors that grew for the x region(s) but shrunk for the y regions.\n‘SW’: sectors that shrunk for the x region(s) but grew for the y regions.\n\nThe function returns the base plot, and then any optional ggplot extras can be added to it.\n\nThe next plot puts LCR on the x axis and the rest of the UK on the y axis, looking at both ‘SE’ and ‘NE’ (sectors all ‘grew’ for LCR, but a mix of growth and shrinkage in the UK). ‘SE’, in purple, has five sectors.\nAnything to the right of the diagonal line has an LQ higher than 1 (or roughly - slightly different number here since the denominator has the region in question left out).\nThe plot included here is a gif that compares what difference logging the scales makes. Logging is useful for checking overall structural change - movements are proportional at different scales. But it can hide the scale of some sectors - for example, it’s clear here that some public sectors are (relatively) a much larger proportion both regionally and nationally in 2021 than 1998.\n\np &lt;- twod_proportionplot(\n  df = itl2.cp,\n  x_regionnames = place, \n  y_regionnames = unique(itl2.cp$ITL_region_name[itl2.cp$ITL_region_name != place]),\n  regionvar = ITL_region_name,\n  category_var = SIC07_description, \n  valuevar = value, \n  timevar = year, \n  start_time = 1998, \n  end_time = 2021, \n  compasspoints_to_display = c('SE','NE')\n)\n\n#add some extras\np &lt;- p + \n  xlab(paste0(place, ' GVA proportion')) +\n  ylab(paste0('UK GVA proportion (MINUS ',place,')')) +\n  coord_fixed(xlim = c(0.1,12), ylim = c(0.1,12)) +  # good for log scale\n  scale_y_log10() +\n  scale_x_log10()\n\np\n\n\n\nThese next two plots do the following:\n\nCompare South and North England for two different time periods, 1998-2007 and then 2008-2021.\nNorth England is on the y axis (so anything left of the diagonal line is a proportionally larger sector in the North for that time period) and South England on the x axis (vice versa).\nEach gif flips between ‘SE + SW’ (sectors that relatively shrunk in the North) and ‘NE + NW’ (sectors that relatively grew in the North).\nThe earlier period shows a much clearer gulf between structural change in the North and South. For 1998-07, shrinking sectors are much more concentrated in the North than South, and growing sectors much more in South.\nThe later period is much more varied. It’s also clear that there are a larger number of sectors relatively growing in the North than there were in the earlier period.\n\n\n#Northern England\nnorth &lt;- itl2.cp$ITL_region_name[grepl('Greater Manc|Merseyside|West Y|Cumbria|Cheshire|Lancashire|East Y|North Y|Tees|Northumb|South Y', itl2.cp$ITL_region_name, ignore.case = T)] %&gt;% unique\n\n#South England\nsouth &lt;- itl2.cp$ITL_region_name[!grepl('Greater Manc|Merseyside|West Y|Cumbria|Cheshire|Lancashire|East Y|North Y|Tees|Northumb|South Y|Scot|Highl|Wales|Ireland', itl2.cp$ITL_region_name, ignore.case = T)] %&gt;% unique\n  \np &lt;- twod_proportionplot(\n  df = itl2.cp,\n  regionvar = ITL_region_name,\n  category_var = SIC07_description, \n  valuevar = value, \n  timevar = year, \n  start_time = 2008,\n  end_time = 2021,\n  # start_time = 1998,\n  # end_time = 2007,\n  compasspoints_to_display = c('SE','SW'),\n  # compasspoints_to_display = c('NE','NW'),\n  y_regionnames = north,\n  x_regionnames = south\n)\n\n#add these after\np &lt;- p + \n  xlab('Southern England GVA proportions') +\n  ylab('North England GVA proportions') +\n  scale_y_log10() +\n  scale_x_log10() +\n  coord_fixed(xlim = c(0.1,11), ylim = c(0.1,11))# good for log scale\n\np\n\n1998 to 2007. Note larger concentration of shrinking sectors concentrated in the North (left of diagonal line) and growing sectors concentrated in the South (right of diagonal line)\n\n2008 to 2021. Much more mixed, larger number of growing sectors on the Northern side of the plot."
  },
  {
    "objectID": "sector_locationquotients_and_proportions.html#loading-in-data-and-finding-location-quotients",
    "href": "sector_locationquotients_and_proportions.html#loading-in-data-and-finding-location-quotients",
    "title": "UK sectors: LQs & proportion plots",
    "section": "",
    "text": "First, load the libraries we’ll be using, and get the ITL2 level data. (If you haven’t already, install the libraries/packages with e.g. install.packages(\"tidyverse\") before loading here.) Also, load some functions that include an LQ function.\n\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(tmap)\nlibrary(plotly)\nlibrary(zoo)#For moving average function\nlibrary(ggrepel)#For self-adjusting plot labels\nsource('functions/misc_functions.R')\noptions(scipen = 99)#Avoids scientific notation\n\nitl2.cp &lt;- read_csv('data/ITL2currentprices_long.csv')\n\nIn this dataframe, we have: ITL2 regions, SIC sectors and year - ranging from 1998 to 2021 in the current data - and finally the current price GVA value.\nThen we’ll find the location quotients for the whole dataset. The Excel sheet here from the ONS has an excellent explanation of location quotients in its notes, I won’t repeat all of that here. But a quick word on what the location quotient is showing for this data:\n\nThe location quotient gives a measure of concentration for sectors (both within regions and across them, see below) when compared to a larger geography (the UK in this case).\nThe LQ is found easily: it’s the ratio of two ratios - the proportion of a sector in region x, over the proportion of that sector in the UK as a whole.\nIf the LQ &gt; 1, that industry is relatively more concentrated in the region, compared to the UK.\nIf the LQ &lt; 1, that industry is relatively less concentrated in the region, compared to the UK.\nWe’re looking at raw GVA values here - the total GVA value of a particular sector in a region tells us something about that region’s economic structure. But it can’t directly be used to say anything definitive about productivity, since we don’t know e.g. if that GVA value is due to high productivity workers, or just a very large but lower productivity sector.\nLQs are good for getting a structural overview, but their biggest weakness is that a regional sector can be proportionally larger than the UK, but itself quite small. So a region’s top LQ sector may still be a tiny part of its overall economy. We’ll look at a way to overcome that weakness below.\nAs the ONS Excel sheet on LQs make really clear, because (A/B)/(C/D) is equivalent to (A/C)/(B/D), the LQ actually captures two related ways of seeing the same thing: how relatively concentrated sectors are across a whole geography like the UK, and how concentrated within a subgeography like South Yorkshire they are. (See the table in the ONS document - numbers which can be read either across geographies or across sectors.)\n\nThe LQ function takes in a dataframe, the name of the region column, the name of the sector column and the name of the value column to find the LQ for. It returns the same dataframe with the LQ and region and total proportions added (we’ll need those proportions later), as well the LQ logged, which will help with plotting (as the log makes plus/minus 1 values symmetric).\nFirst, here’s the function working on a single year in the data, to illustrate what the function takes in.\n\nlq1998 &lt;- add_location_quotient_and_proportions(\n  df = itl2.cp %&gt;% filter(year == 1998),\n  regionvar = ITL_region_name,\n  lq_var = SIC07_description,\n  valuevar = value\n)\n\nLet’s repeat that for all years and replace the original dataframe with the result.\n\nitl2.cp &lt;- itl2.cp %&gt;% \n  split(.$year) %&gt;% \n  map(add_location_quotient_and_proportions, \n      regionvar = ITL_region_name,\n      lq_var = SIC07_description,\n      valuevar = value) %&gt;% \n  bind_rows()\n\nTaking a quick look at the resulting LQs, this is top ten LQ sectors for South Yorkshire, showing which sectors have relatively larger proportions of GVA in South Yorkshire compared to the UK as a whole.\nNote we can see the point made above about relative LQ concentration not capturing actual scale. ‘Manufacture of basic metals’ has 5 times the GVA concentration of the UK as a whole, but its regional percent of GVA is only 1.28%. This is reflecting that this sector is generally small everywhere, just larger in South Yorkshire. Contrast with ‘Education’ - still a higher relative proportion than the UK with an LQ of 1.7, but it’s actually nearly 11% of South Yorkshire’s GVA.\n\nitl2.cp %&gt;% filter(\n  ITL_region_name == 'South Yorkshire',\n  year == 2021\n  ) %&gt;% \n  mutate(regional_percent = sector_regional_proportion *100) %&gt;% \n  select(SIC07_description,regional_percent, LQ) %&gt;% \n  arrange(-LQ) %&gt;% \n  slice(1:10)\n\n# A tibble: 10 × 3\n   SIC07_description                                  regional_percent    LQ\n   &lt;chr&gt;                                                         &lt;dbl&gt; &lt;dbl&gt;\n 1 Manufacture of basic metals                                   1.28   5.14\n 2 Manufacture of furniture                                      0.780  3.17\n 3 Manufacture of fabricated metal products                      2.21   2.79\n 4 Other manufacturing                                           0.694  2.53\n 5 Manufacture of other non-metallic mineral products            0.835  2.39\n 6 Manufacture of rubber and plastic products                    1.02   2.39\n 7 Manufacture of electrical equipment                           0.576  1.95\n 8 Motor trades                                                  2.52   1.80\n 9 Education                                                    10.8    1.70\n10 Telecommunications                                            2.69   1.64\n\n\nRepeating that for Greater Manchester, where none of the LQ top ten are especially large percentages of its GVA:\n\nitl2.cp %&gt;% filter(\n  ITL_region_name == 'Greater Manchester',\n  year == 2021\n  ) %&gt;% \n  mutate(regional_percent = sector_regional_proportion *100) %&gt;% \n  select(SIC07_description,regional_percent, LQ) %&gt;% \n  arrange(-LQ) %&gt;% \n  slice(1:10)\n\n# A tibble: 10 × 3\n   SIC07_description                                     regional_percent    LQ\n   &lt;chr&gt;                                                            &lt;dbl&gt; &lt;dbl&gt;\n 1 Manufacture of textiles                                          0.732  3.47\n 2 Sports, amusement and recreation activities                      0.979  1.71\n 3 Warehousing and transport support activities                     2.11   1.64\n 4 Manufacture of rubber and plastic products                       0.687  1.61\n 5 Travel agency and tour operator activities                       0.528  1.59\n 6 Office administration and business support activities            1.85   1.50\n 7 Manufacture of food products                                     1.62   1.47\n 8 Manufacture of wood and paper products                           0.573  1.38\n 9 Repair of computers, personal and household goods                0.162  1.33\n10 Telecommunications                                               2.16   1.32\n\n\nLiverpool City Region has three public-sector-heavy SICs in its LQ top ten:\n\nitl2.cp %&gt;% filter(\n  ITL_region_name == 'Merseyside',\n  year == 2021\n  ) %&gt;% \n  mutate(regional_percent = sector_regional_proportion *100) %&gt;% \n  select(SIC07_description,regional_percent, LQ) %&gt;% \n  arrange(-LQ) %&gt;% \n  slice(1:10)\n\n# A tibble: 10 × 3\n   SIC07_description                                      regional_percent    LQ\n   &lt;chr&gt;                                                             &lt;dbl&gt; &lt;dbl&gt;\n 1 Manufacture of motor vehicles                                     1.96   2.89\n 2 Manufacture of petroleum, chemicals and pharmaceutica…            4.20   2.50\n 3 Manufacture of other non-metallic mineral products                0.770  2.20\n 4 Human health activities                                          12.0    1.91\n 5 Gambling and betting activities                                   0.467  1.86\n 6 Sports, amusement and recreation activities                       1.04   1.81\n 7 Security and investigation activities                             0.323  1.49\n 8 Public administration and defence                                 7.19   1.39\n 9 Warehousing and transport support activities                      1.72   1.34\n10 Land transport                                                    1.40   1.32\n\n\nAs mentioned, the LQ has a handy bonus feature: it can be used either to compare sectors within subregions, as above, or - looking at individual sectors - to see how geographical concentration differs.\nSectors with the highest difference across places in the UK will have a higher spread between their min and max LQ values. Some sectors - often public sectors - are fairly evenly spread everywhere. Here we find the spread and pick out the top five most geographically varied:\n\n#Find the geographical variation of sectors using the LQ spread\nLQspread &lt;- itl2.cp %&gt;% \n  filter(year == 2021) %&gt;% \n  group_by(SIC07_description) %&gt;% \n  summarise(LQ_spread = diff(range(LQ))) %&gt;% \n  arrange(-LQ_spread)\n\n#Show top 5\nLQspread[1:5,]\n\n# A tibble: 5 × 2\n  SIC07_description                             LQ_spread\n  &lt;chr&gt;                                             &lt;dbl&gt;\n1 Forestry and fishing                              41.5 \n2 Mining and quarrying                              35.4 \n3 Manufacture of beverages and tobacco products     15.4 \n4 Manufacture of basic metals                       10.8 \n5 Manufacture of other transport equipment           9.77\n\n\nThat can then be used to pick out particular sectors to map. For example, South Yorshire’s most concentrated GVA sector - manufacture of basic metals - is also the UK’s fourth most varied sector, and looks like this across the UK (note South Yorkshire doesn’t top the most concentrated for this sector).\nThe geographical pattern is very clear. (Greener colours are more concentrated than the UK as whole; redder colours less so.)\nThe map shapefiles are included in this repo, and can also be downloaded from geoportal.statistics.gov.uk.\n\n#Load ITL2 map data using the sf library\nitl2.geo &lt;- st_read('data/ITL_geographies/International_Territorial_Level_2_January_2021_UK_BFE_V2_2022_-4735199360818908762/ITL2_JAN_2021_UK_BFE_V2.shp', quiet = T) %&gt;% \n  st_simplify(preserveTopology = T, dTolerance = 100)\n\n#Join map data to a subset of the GVA data\nsector_LQ_map &lt;- itl2.geo %&gt;% \n  right_join(\n    itl2.cp %&gt;% filter(\n      year==2021,\n      SIC07_description == LQspread$SIC07_description[4]#picking out the fourth highest geographical spread sector\n      ),\n    by = c('ITL221NM'='ITL_region_name')\n  )\n\n\n#Plot map\ntm_shape(sector_LQ_map) +\n  tm_polygons('LQ_log', n = 9) +\n  tm_layout(title = 'LQ spread of\\nBasic metals\\nAcross ITL2 regions', legend.outside = T)"
  },
  {
    "objectID": "sector_locationquotients_and_proportions.html#lq-change-and-growth-over-time",
    "href": "sector_locationquotients_and_proportions.html#lq-change-and-growth-over-time",
    "title": "UK sectors: LQs & proportion plots",
    "section": "",
    "text": "Now onto plotting LQs themselves. To do this, we’ll add in a measure of what the change/growth trends for LQs are, for each sector in each ITL2 zone. This next function adds in some ordinary least squares slopes for LQ change over time, to get a sense of the growth trends. LQ_log is used so that slope scale is the same for different size sectors, so their trends are comparable. (It returns zero for any region/sector combinations with no data at all.)\n\n#Use\n#LQ_slopes %&gt;% filter(slope==0)\n#To see which didn't get slopes (only 8 rows in the current data)\nLQ_slopes &lt;- compute_slope_or_zero(\n  data = itl2.cp, \n  ITL_region_name, SIC07_description,#slopes will be found within whatever grouping vars are added here\n  y = LQ_log, x = year)\n\nWe’ll plot data for a single year, but include that information about how LQ has changed over the full range of the data from 1998 to 2021.\nThe following code does three things:\n\nFilters down to a single year and keeps in yeartoplot.\nJoins the LQ-over-time slopes to this single year, so we can see what the trends were in the rest of the time range for each place and sector\nFinds the minimum and maximum LQ values for the entire data range, for each place and year (this is explained more below when looking at a plot) and adds this to yeartoplot.\n\n\n#Filter down to a single year\nyeartoplot &lt;- itl2.cp %&gt;% filter(year == 2021)\n\n#Add slopes into data to get LQ plots\nyeartoplot &lt;- yeartoplot %&gt;% \n  left_join(\n    LQ_slopes,\n    by = c('ITL_region_name','SIC07_description')\n  )\n\n#Get min/max values for LQ over time as well, for each sector and place, to add as bars so range of sector is easy to see\nminmaxes &lt;- itl2.cp %&gt;% \n  group_by(SIC07_description,ITL_region_name) %&gt;% \n  summarise(\n    min_LQ_all_time = min(LQ),\n    max_LQ_all_time = max(LQ)\n  )\n\n#Join min and max\nyeartoplot &lt;- yeartoplot %&gt;% \n  left_join(\n    minmaxes,\n    by = c('ITL_region_name','SIC07_description')\n  )\n\nWe then pick a place to take an initial look at - Liverpool City Region (LCR) (which is Merseyside in the ITL2 data). This will be the main place on the plot, with others to compare to. We also order the sectors by LCR’s LQ, so they’re ordered in the plots by LCR.\n\nplace = 'Merseyside'\n\n#Get a vector with sectors ordered by the place's LQs, descending order\n#Use this next to factor-order the SIC sectors\nsectorLQorder &lt;- itl2.cp %&gt;% filter(\n  ITL_region_name == place,\n  year == 2021\n) %&gt;% \n  arrange(-LQ) %&gt;% \n  select(SIC07_description) %&gt;% \n  pull()\n\n#Turn the sector column into a factor and order by LCR's LQs\nyeartoplot$SIC07_description &lt;- factor(yeartoplot$SIC07_description, levels = sectorLQorder, ordered = T)\n\nA plot for all sectors is a little unwieldy, though interesting to get an overiew. You can view it here. (The plot code below will produce this full plot if you don’t filter first.)\nInstead, let’s look just at LCR sectors where LQ is more than 1 - that is, sectors that have relatively higher GVA in LCR compared to the rest of the UK. First, find sectors in LCR that are LQ &gt; 1, then use that to get those sectors for all places, so we can compare LCR to those places.\nNote the commented out line - there are other useful things to filter by, e.g. if we want only sectors where the LQ had grown relatively over the time range (slope &gt; 1).\n\n# Reduce to SY LQ 1+\nlq.selection &lt;- yeartoplot %&gt;% filter(\n  ITL_region_name == place,\n  # slope &gt; 1,#LQ grew relatively over time\n  LQ &gt; 1\n  )\n\n#Keep only sectors that were LQ &gt; 1 from the main plotting df\nyeartoplot &lt;- yeartoplot %&gt;% filter(\n  SIC07_description %in% lq.selection$SIC07_description\n)\n\nNow we can plot. The plot functions do two things:\n\nThe first function (LQ_baseplot) begins the plot by adding all places (faintness controlled by the alpha value). We also have the option of not including this by setting alpha to zero, but it still functions as the base plot initialisation, so always use.\nThe function addplacename_to_LQplot can be used repeatedly to add specific places with clearer shapes (choose shape numbers from somewhere like here).\n\n\np &lt;- LQ_baseplot(df = yeartoplot, alpha = 0.1, sector_name = SIC07_description, \n                 LQ_column = LQ, change_over_time = slope)\n\np &lt;- addplacename_to_LQplot(df = yeartoplot, placename = 'Merseyside',\n                            plot_to_addto = p, shapenumber = 16,\n                            min_LQ_all_time = min_LQ_all_time, max_LQ_all_time = max_LQ_all_time,#Range bars won't appear if either of these not included\n                            value_column = value, sector_regional_proportion = sector_regional_proportion,#Sector size numbers won't appear if either of these not included\n                            region_name = ITL_region_name,#The next four, the function needs them all \n                            sector_name = SIC07_description,\n                            change_over_time = slope, \n                            LQ_column = LQ \n                            )\n\np\n\nDetails of what’s in this plot:\n\nLQ is on the x axis, log scale so values below 1 are symmetrical. The vertical line at 1 marks where sectors are more or less concentrated than the UK as a whole (more concentrated to the right of the line, LQ &gt; 1). Liverpool City Region sector GVA location quotients are shown in the green and red circles.\nGreen circles: the LQ trend has increased over the full data range (slope &gt; 1)\nRed circles: the LQ trend has decreased over the full data range (slope &lt; 1)\nHorizontal bar-lines show the full range of the LQ for that sector across all years (more on that below).\nThe fainter background circles show all other ITL2 regions to show where LCR is relative to those. If they’re more clustered around 1, they’re less geographically varied. (Public sectors like Education tend to be evenly spread, as the plot shows.)\nOn the right hand side, figures for the raw GVA value and its percentage of LCR’s total GVA is included.\n\n\nSome things we can see in this plot:\n\nAs we saw above, manufacture of motor vehicles has LCR’s highest LQ value (2.89) means it’s close to three times more concentrated in LCR relative to the UK as a whole. It’s also got the largest green circle, so it’s trend slope is highest from this group. Note what ‘growth’ means here - if a sector’s LQ is ‘growing’, it’s relative. It could be that GVA has been relatively shrinking elsewhere (we’d need to look at GVA change over time to know - we do this below).\nMotor vehicles’ marker is also on the right of the range bar - it’s growing (relatively) and the current year’s data is close to the LQ’s all time high. (Compare to e.g. Gambling and betting - growing but it’s nowhere near its relative growth peak).\nThe GVA % number on the right also shows that motor trades is a bit less than 2% of LCR’s economy, compared to 4.2% for ‘Manufacture of petroleum, chemicals and pharmaceuticals’ - less relatively concentrated in LCR, but larger.\n‘Petroleum, chemicals and pharmaceuticals’ is also a very different relative change story - it’s always had a higher LQ in LCR (the range bars don’t cross zero) but it’s growth circle is red (sloping down) and it’s right at the bottom of the LQ range in the latest year.\n\n\nWe’ll come back to that last sector in a moment, but let’s also see how to use the plot code to compare different places more specifically.\nThe next code chunk does the following:\n\nGet the base plot, setting alpha to zero so we don’t get all places\nAdd two specific places - Greater Manchester (GM) and South Yorkshire (SY) - without including arguments for the range bars or numbers, as those should be in the final overlay of LCR.\nAdd LCR last so it appears on top.\n\nWhen comparing different regions like this, it’s helpful to note that any sector with a lower LQ is also proportionally a smaller part of that region’s economy (the LQ for a particular sector has the same denominator across all sectors, so the values here map to regional sector percentages.)\nSo for example, from this we can see:\n\nGM and SY’s motor vehicle manufacture sectors’ LQs are both below 1, and a smaller proportion of their GVA than LCR.\nSectors like rubber and plastics products, and telecoms, are both more concentrated in SY and GM.\n\n\n#Repeat but overlay other places\np &lt;- LQ_baseplot(df = yeartoplot, alpha = 0, sector_name = SIC07_description, \n                 LQ_column = LQ, change_over_time = slope)\n\np &lt;- addplacename_to_LQplot(df = yeartoplot, plot_to_addto = p, \n                            placename = 'Greater Manchester', shapenumber = 23,\n                            region_name = ITL_region_name,#The next four, the function needs them all \n                            sector_name = SIC07_description, change_over_time = slope, LQ_column = LQ)\n\np &lt;- addplacename_to_LQplot(df = yeartoplot, plot_to_addto = p, \n                            placename = 'South Yorkshire', shapenumber = 22,\n                            region_name = ITL_region_name,\n                            sector_name = SIC07_description, change_over_time = slope, LQ_column = LQ)\n\np &lt;- addplacename_to_LQplot(df = yeartoplot, plot_to_addto = p, \n                            placename = place1, shapenumber = 16,\n                            min_LQ_all_time = min_LQ_all_time,max_LQ_all_time = max_LQ_all_time,#Include minmax\n                            value_column = value, sector_regional_proportion = sector_regional_proportion,#include numbers\n                            region_name = ITL_region_name,\n                            sector_name = SIC07_description, change_over_time = slope, LQ_column = LQ)\np &lt;- p + \n  annotate(\n    \"text\",\n    label = \"Greater Manchester: diamonds\\nSouth Yorkshire: squares\",\n    x = 0.05, y = 'Manufacture of rubber and plastic products',\n    \n  )\n\np"
  },
  {
    "objectID": "sector_locationquotients_and_proportions.html#looking-at-trends",
    "href": "sector_locationquotients_and_proportions.html#looking-at-trends",
    "title": "UK sectors: LQs & proportion plots",
    "section": "",
    "text": "Let’s look more deeply at change over time to see what’s happening with Petroleum, chemicals and pharmaceuticals in LCR. Is it actually a shrinking proportion of LCR’s economy, or has it just grown elsewhere? The code below does three things:\n\nFilter the full dataset down to just the one sector. grepl is used to save having to use the full sector name (but watch out for multiple sectors with the same words in like ‘motor’).\nUse the zoo library’s rollapply function to get a moving average of the sector’s regional proportions, so trends are easier to see. (A moving average for LQ is also included, though we don’t use it here.)\nFlag the ITL2 region we’re interested and, in this case, just keep the top ten places where the sector had the largest GVA proportion on average for the last three years in the data.\n\nFrom this plot, we can see that, yes, petroleum and chemicals has indeed shrunk as a proportion of LCR’s economy, trending down since around 2011. Note, we could in theory plot the actual GVA values but they’re not inflation-adjusted so would be misleading. So while we can say from this data what sectors have changed proportionally, it’s possible petroleum/chemicals is shrinking due to other sectors’ relative growth in LCR.\n\n#Pick a sector to plot separately for all places\n#Use grepl as a shortcut to search for sector names\nsector &lt;- itl2.cp$SIC07_description[grepl('petroleum', itl2.cp$SIC07_description ,ignore.case = T)] %&gt;% unique\n\ntimeplot &lt;- itl2.cp %&gt;% \n  filter(SIC07_description == sector) \n\n#Use zoo's rollapply function to get a moving average\ntimeplot &lt;- timeplot %&gt;% \n  group_by(ITL_region_name) %&gt;% \n  arrange(year) %&gt;% \n  mutate(\n    LQ_movingav = rollapply(LQ,3,mean,align='right',fill=NA),\n    percent_movingav = rollapply(sector_regional_proportion * 100,3,mean,align='right',fill=NA)\n  )\n\n#Or pick top size values\n#Largest % in 2021\nlargest_percents &lt;- timeplot %&gt;% \n  filter(year == 2021) %&gt;% \n  arrange(-percent_movingav)\n\n#Keep only the top ten places and order them\ntimeplot &lt;- timeplot %&gt;% \n  mutate(ITL_region_name = factor(ITL_region_name, ordered = T, levels = largest_percents$ITL_region_name)) %&gt;% \n  filter(ITL_region_name %in% largest_percents$ITL_region_name[1:10])\n\n#Mark the ITL of interest so it can be clearer in the plot\ntimeplot &lt;- timeplot %&gt;%\n  mutate(\n    ITL2ofinterest = ifelse(ITL_region_name == place, 'ITL of interest','other'),\n  )\n\nggplot(timeplot %&gt;% \n         rename(`ITL region` = ITL_region_name) %&gt;% \n         filter(!is.na(percent_movingav)),#remove NAs from dates so the x axis doesn't show them\n       aes(x = year, y = percent_movingav, colour = `ITL region`, size = ITL2ofinterest, linetype = ITL2ofinterest, group = `ITL region`)) +\n  geom_point() +\n  geom_line() +\n  scale_size_manual(values = c(2.5,1)) +\n  scale_color_brewer(palette = 'Paired', direction = 1) +\n  ylab('Regional GVA percent') +\n  guides(size = \"none\", linetype = \"none\") +\n  ggtitle(\n    paste0(sector,'\\n', place, ' highlighted')\n      ) +\n    theme(plot.title = element_text(face = 'bold'))\n\n\n\n\nIf we want to look at all places at once, it’s useful to do two things:\n\nUse a log scale on the y axis, so change scale is comparable and we can see places with smaller sectors.\nUse plotly to make an interactive plot, so hovering over lines will show what places are interactively.\n\nThis plot does so for LCR’s largest LQ sector, manufacture of motor vehicles.\n\nsector &lt;- itl2.cp$SIC07_description[grepl('motor vehicles', itl2.cp$SIC07_description ,ignore.case = T)] %&gt;% unique\n\ntimeplot &lt;- itl2.cp %&gt;% \n  filter(SIC07_description == sector) \n\ntimeplot &lt;- timeplot %&gt;% \n  group_by(ITL_region_name) %&gt;% \n  arrange(year) %&gt;% \n  mutate(\n    LQ_movingav = rollapply(LQ,3,mean,align='right',fill=NA),\n    percent_movingav = rollapply(sector_regional_proportion * 100,3,mean,align='right',fill=NA)\n  )\n\n\ntimeplot &lt;- timeplot %&gt;%\n  mutate(\n    ITL2ofinterest = ifelse(ITL_region_name == place, 'ITL of interest','other'),\n  )\n\np &lt;- ggplot(timeplot %&gt;% \n         rename(`ITL region` = ITL_region_name) %&gt;% \n         filter(!is.na(percent_movingav)),#remove NAs from dates so the x axis doesn't show them, \n       aes(x = year, y = percent_movingav, colour = ITL2ofinterest, size = ITL2ofinterest, group = `ITL region`)) +\n  geom_point() +\n  geom_line() +\n  scale_y_log10() +\n  ylab('Regional GVA percent (log 10)') +\n  scale_size_manual(values = c(2,0.5)) +\n  scale_colour_manual(values = c('black','grey')) +\n  ggtitle(\n    paste0(sector,'\\n', place, ' highlighted')\n      ) +\n    theme(plot.title = element_text(face = 'bold'))\n\np\n\n\n\n\nIt’s easy to convert a ggplot to an interactive plotly. It can’t be included on this page, but will run in RStudio, and there’s an online version here.)\n\nggplotly(p, tooltip = c(\"ITL region\"))\n\nWe can also filter sectors by which has ‘grown’ the most, using the function above that found slopes for growth and shrinkage in the location quotient.\nRather than plotting LQ though, let’s plot % GVA again, for those 10 sectors with the largest LQ growth trend. For motor vehicle manufacture, we can see it’s actually not a very large part of LCR’s economy. (Note land/water transport and retail trade moving closely together too.)\nThis highlights again a key weakness of using LQs. Though they’re very useful for getting a sense of structure, the lack of information about actual sector scale can be a problem. We’ll look at a way to address this next.\n\n#Look just at place of interest\n#And arrange by the 'growth' slope.\nplace_slopes &lt;- yeartoplot %&gt;% \n  filter(ITL_region_name == place) %&gt;% \n  arrange(-slope)\n\n#Use that to filter the main df and order sectors by which slope is largest\ntimeplot.sectors &lt;- itl2.cp %&gt;% \n  filter(ITL_region_name == place) %&gt;% \n  mutate(SIC07_description = factor(SIC07_description, ordered = T, levels = place_slopes$SIC07_description))\n\n#Moving averages\ntimeplot.sectors &lt;- timeplot.sectors %&gt;% \n  group_by(SIC07_description) %&gt;% \n  arrange(year) %&gt;% \n  mutate(\n    LQ_movingav = rollapply(LQ,3,mean,align='right',fill=NA),\n    percent_movingav = rollapply(sector_regional_proportion * 100,3,mean,align='right',fill=NA)\n  )\n\n#Filter down to top ten LQ growth sectors\ntimeplot.sectors &lt;- timeplot.sectors %&gt;% \n  filter(\n    SIC07_description %in% place_slopes$SIC07_description[1:10]\n  )\n\n#Plot GVA percent of the largest LQ growth sectors\nggplot(timeplot.sectors %&gt;% \n         rename(Sector = SIC07_description) %&gt;% \n         filter(!is.na(percent_movingav)),#remove NAs from dates so the x axis doesn't show them\n       aes(x = year, y = percent_movingav, colour = Sector, group = Sector)) +\n  geom_point() +\n  geom_line() +\n  scale_color_brewer(palette = 'Paired', direction = 1) +\n  ylab('GVA percent') +\n  guides(size = \"none\", linetype = \"none\") +\n   ggtitle(\n    paste0('Top ten sectors by LQ growth trend\\n', place)\n      ) +\n    theme(plot.title = element_text(face = 'bold'))"
  },
  {
    "objectID": "sector_locationquotients_and_proportions.html#d-location-quotient-plots",
    "href": "sector_locationquotients_and_proportions.html#d-location-quotient-plots",
    "title": "UK sectors: LQs & proportion plots",
    "section": "",
    "text": "One way to address the fact that LQs can be large while the actual proportion of the economy they represent can be tiny (and vice versa) is to break it down into its two component parts. As we’ve said, the LQ is the ratio of regional sector proportion over the same sector’s proportion at the larger geography. We can just plot both of those separately on each axis.\nIf we’re doing this, it also makes sense to remove the region in question when working out the sector proportions for the larger geography, so it’s not double-counted, as it is in LQs. Let’s look at a plot to explain this, using the twod_proportionplot function, which returns a ggplot object we can then add to.\nMost things going into the function are obvious, but some things to note:\n\nx_regionnames and x_regionnames can be any list of ITL2 region names. We want them to be different on each axis. In this case, Liverpool City Region is going on the x axis and the rest of the UK on the y axis (by passing in “Everything except LCR.”)\nIn this one, we pass in the earliest and latest possible years to plot. This will show very large structural change given that’s a 23 year span.\ncompasspoints_to_display: leave blank to display all the data, or here we can specify any combination of ‘SE’,‘SW’,‘NE’ and ‘NW’ compass directions. These show the following:\n\n‘NE’: sectors that grew (in GVA percent terms) for both the x and y region(s).\n‘SW’: sectors that shrunk for both the x and y region(s).\n‘SE’: sectors that grew for the x region(s) but shrunk for the y regions.\n‘SW’: sectors that shrunk for the x region(s) but grew for the y regions.\n\nThe function returns the base plot, and then any optional ggplot extras can be added to it.\n\nThe next plot puts LCR on the x axis and the rest of the UK on the y axis, looking at both ‘SE’ and ‘NE’ (sectors all ‘grew’ for LCR, but a mix of growth and shrinkage in the UK). ‘SE’, in purple, has five sectors.\nAnything to the right of the diagonal line has an LQ higher than 1 (or roughly - slightly different number here since the denominator has the region in question left out).\nThe plot included here is a gif that compares what difference logging the scales makes. Logging is useful for checking overall structural change - movements are proportional at different scales. But it can hide the scale of some sectors - for example, it’s clear here that some public sectors are (relatively) a much larger proportion both regionally and nationally in 2021 than 1998.\n\np &lt;- twod_proportionplot(\n  df = itl2.cp,\n  x_regionnames = place, \n  y_regionnames = unique(itl2.cp$ITL_region_name[itl2.cp$ITL_region_name != place]),\n  regionvar = ITL_region_name,\n  category_var = SIC07_description, \n  valuevar = value, \n  timevar = year, \n  start_time = 1998, \n  end_time = 2021, \n  compasspoints_to_display = c('SE','NE')\n)\n\n#add some extras\np &lt;- p + \n  xlab(paste0(place, ' GVA proportion')) +\n  ylab(paste0('UK GVA proportion (MINUS ',place,')')) +\n  coord_fixed(xlim = c(0.1,12), ylim = c(0.1,12)) +  # good for log scale\n  scale_y_log10() +\n  scale_x_log10()\n\np\n\n\n\nThese next two plots do the following:\n\nCompare South and North England for two different time periods, 1998-2007 and then 2008-2021.\nNorth England is on the y axis (so anything left of the diagonal line is a proportionally larger sector in the North for that time period) and South England on the x axis (vice versa).\nEach gif flips between ‘SE + SW’ (sectors that relatively shrunk in the North) and ‘NE + NW’ (sectors that relatively grew in the North).\nThe earlier period shows a much clearer gulf between structural change in the North and South. For 1998-07, shrinking sectors are much more concentrated in the North than South, and growing sectors much more in South.\nThe later period is much more varied. It’s also clear that there are a larger number of sectors relatively growing in the North than there were in the earlier period.\n\n\n#Northern England\nnorth &lt;- itl2.cp$ITL_region_name[grepl('Greater Manc|Merseyside|West Y|Cumbria|Cheshire|Lancashire|East Y|North Y|Tees|Northumb|South Y', itl2.cp$ITL_region_name, ignore.case = T)] %&gt;% unique\n\n#South England\nsouth &lt;- itl2.cp$ITL_region_name[!grepl('Greater Manc|Merseyside|West Y|Cumbria|Cheshire|Lancashire|East Y|North Y|Tees|Northumb|South Y|Scot|Highl|Wales|Ireland', itl2.cp$ITL_region_name, ignore.case = T)] %&gt;% unique\n  \np &lt;- twod_proportionplot(\n  df = itl2.cp,\n  regionvar = ITL_region_name,\n  category_var = SIC07_description, \n  valuevar = value, \n  timevar = year, \n  start_time = 2008,\n  end_time = 2021,\n  # start_time = 1998,\n  # end_time = 2007,\n  compasspoints_to_display = c('SE','SW'),\n  # compasspoints_to_display = c('NE','NW'),\n  y_regionnames = north,\n  x_regionnames = south\n)\n\n#add these after\np &lt;- p + \n  xlab('Southern England GVA proportions') +\n  ylab('North England GVA proportions') +\n  scale_y_log10() +\n  scale_x_log10() +\n  coord_fixed(xlim = c(0.1,11), ylim = c(0.1,11))# good for log scale\n\np\n\n1998 to 2007. Note larger concentration of shrinking sectors concentrated in the North (left of diagonal line) and growing sectors concentrated in the South (right of diagonal line)\n\n2008 to 2021. Much more mixed, larger number of growing sectors on the Northern side of the plot."
  },
  {
    "objectID": "beattyfothergill.html",
    "href": "beattyfothergill.html",
    "title": "Beatty & Fothergill on productivity: viz",
    "section": "",
    "text": "Report webpage and PDF.\nThis CRESR report from 2020 presents a fascinating analysis of how different the UK productivity picture is depending on what measure/control one uses. To illustrate this, I scraped the numbers out of table 1 - this gives index values for the eight different measures the report compares.\nThis first plot is just the values from table 1 in interactive form, comparing each measure type and showing South Yorkshire in red (or Sheffield City Region, as it was at the time). See the report pp.3 for a full explanation of each measure.\nThe report interprets the differences in values in this figure as percentage differences. So, for the largest gap between lowest and highest - GVA per head:\n\n“London comes out on top at 177 per cent of the UK average, whereas Southern Scotland ranks lowest at just 59 per cent. To put these figures another way, output per head in London is three times higher than in Southern Scotland.” (p.5)\n\nAt the other extreme, controlling for industry, occupation and hours worked:\n\n“London is overtaken at the top by Thames Valley Berkshire, at 126 per cent of the UK average, whilst Cornwall is lowest at 81 per cent… the lowest ranked UK sub-region has an estimated efficiency of production that is just below two-thirds of the best.” (p.6)\n\nThat’s a big difference - the top ranked place being 3 times more productive, vs only a two-thirds gap overall. There’s possibly an argument for not adjusting for industrial mix (that mix is exactly one of the things one might want to change to improve productivity) but it’s still a very strong illustration of what difference all the various key factors (including demographics, unemployment, inactivity etc) can make.\n\n#Load in scraped data from table 1\npip &lt;- read_csv('data/Beatty_Fothergill_productivity-industries-places_table1.csv') %&gt;% filter(Place!='United Kingdom')\n\n#Get factor order from column order before converting to long\nmeasure_factororder = names(pip)[2:9]\n\npip &lt;- pip %&gt;% \n  pivot_longer(cols = 2:9, names_to = \"measure\", values_to = \"value\") %&gt;% \n  mutate(measure = factor(measure, ordered = T, levels = measure_factororder)) %&gt;% \n  mutate(SCR = ifelse(Place == 'Sheffield City Region', T,F))\n\np &lt;- ggplot(pip, aes(x = measure, y = value, group = Place, colour = SCR, alpha = SCR)) +\n  geom_jitter(width = 0.1, size = 3) +\n  geom_hline(yintercept = 100, colour = 'red', size = 3, alpha = 0.25) +\n  scale_colour_manual(values = c('black','red')) +\n  scale_alpha_manual(values = c(0.5,1)) +\n  coord_flip() +\n  xlab('') + ylab('index value (UK average is 100)')\n  \nggplotly(p, tooltip = 'Place')\n\n\n\n\n\nIt’s also striking if places are ranked on each of these measures, and then seeing how much rank position changes.\nThe top five most productive places hardly change rank at all for the different measures. Cornwall and Isles of Scilly, at the least productive end, overlap with a few other places depending on the measure.\nVery many places, however, have radically different productivity rank positions depending on the chosen measure.\n\npip &lt;- pip %&gt;% \n  group_by(measure) %&gt;% \n  mutate(\n    rank = rank(value)\n  ) %&gt;% \n  group_by(Place) %&gt;% \n  mutate(\n    meanrank = mean(rank),\n    rankrange = max(rank) - min(rank)\n    )\n\n#Look at spread of rank positions for all places\n#Order by mean rank\nggplot(pip, aes(x = fct_reorder(Place, meanrank), y = rank)) +\n  geom_boxplot() +\n  coord_flip() +\n  xlab(\"\") +\n  ylab(\"rank (higher number is more productive)\")\n\n\n\n\nPicking out the top ten places with the widest difference in rank across measures and looking at how they change, for some there is clear opposite movement: Oxfordshire, very near highest rank for GVA per head, drops very far down for the other measures. Tees Valley goes in the opposite direction.\nIt looks like a geographical north-south pattern for which measure types and their rank range dominate. Oxfordshire and Gloucestershire start out with higher rank than Liverpool City Region and Tees, but those swap over entirely.\n\n#Pick out TEN of the largest rank spreads\ntop_places &lt;- pip %&gt;%\n  ungroup() %&gt;% \n  distinct(Place, rankrange) %&gt;% \n  arrange(desc(rankrange)) %&gt;%\n  slice_head(n = 10) %&gt;%\n  pull(Place)\n\n#Look at that for top rank movers\nggplot(pip %&gt;% filter(Place %in% top_places) %&gt;% ungroup() %&gt;% mutate(Place = fct_reorder(Place,-rankrange,mean)), aes(x = measure, y = rank, group = Place, colour = Place)) +\n  geom_line(size = 2) +\n  geom_point(size = 3) +\n  scale_color_brewer(palette = 'Paired', direction = -1) +\n  coord_flip() +\n  guides(colour=guide_legend(title=\"Place (ordered by rank range)\")) +\n  theme_minimal() +\n  xlab('') + ylab('Rank position (higher is more productive)')"
  },
  {
    "objectID": "beattyfothergill.html#beatty-and-fothergill-report-productivity-of-industry-and-places-2020",
    "href": "beattyfothergill.html#beatty-and-fothergill-report-productivity-of-industry-and-places-2020",
    "title": "Beatty & Fothergill on productivity: viz",
    "section": "",
    "text": "Report webpage and PDF.\nThis CRESR report from 2020 presents a fascinating analysis of how different the UK productivity picture is depending on what measure/control one uses. To illustrate this, I scraped the numbers out of table 1 - this gives index values for the eight different measures the report compares.\nThis first plot is just the values from table 1 in interactive form, comparing each measure type and showing South Yorkshire in red (or Sheffield City Region, as it was at the time). See the report pp.3 for a full explanation of each measure.\nThe report interprets the differences in values in this figure as percentage differences. So, for the largest gap between lowest and highest - GVA per head:\n\n“London comes out on top at 177 per cent of the UK average, whereas Southern Scotland ranks lowest at just 59 per cent. To put these figures another way, output per head in London is three times higher than in Southern Scotland.” (p.5)\n\nAt the other extreme, controlling for industry, occupation and hours worked:\n\n“London is overtaken at the top by Thames Valley Berkshire, at 126 per cent of the UK average, whilst Cornwall is lowest at 81 per cent… the lowest ranked UK sub-region has an estimated efficiency of production that is just below two-thirds of the best.” (p.6)\n\nThat’s a big difference - the top ranked place being 3 times more productive, vs only a two-thirds gap overall. There’s possibly an argument for not adjusting for industrial mix (that mix is exactly one of the things one might want to change to improve productivity) but it’s still a very strong illustration of what difference all the various key factors (including demographics, unemployment, inactivity etc) can make.\n\n#Load in scraped data from table 1\npip &lt;- read_csv('data/Beatty_Fothergill_productivity-industries-places_table1.csv') %&gt;% filter(Place!='United Kingdom')\n\n#Get factor order from column order before converting to long\nmeasure_factororder = names(pip)[2:9]\n\npip &lt;- pip %&gt;% \n  pivot_longer(cols = 2:9, names_to = \"measure\", values_to = \"value\") %&gt;% \n  mutate(measure = factor(measure, ordered = T, levels = measure_factororder)) %&gt;% \n  mutate(SCR = ifelse(Place == 'Sheffield City Region', T,F))\n\np &lt;- ggplot(pip, aes(x = measure, y = value, group = Place, colour = SCR, alpha = SCR)) +\n  geom_jitter(width = 0.1, size = 3) +\n  geom_hline(yintercept = 100, colour = 'red', size = 3, alpha = 0.25) +\n  scale_colour_manual(values = c('black','red')) +\n  scale_alpha_manual(values = c(0.5,1)) +\n  coord_flip() +\n  xlab('') + ylab('index value (UK average is 100)')\n  \nggplotly(p, tooltip = 'Place')\n\n\n\n\n\nIt’s also striking if places are ranked on each of these measures, and then seeing how much rank position changes.\nThe top five most productive places hardly change rank at all for the different measures. Cornwall and Isles of Scilly, at the least productive end, overlap with a few other places depending on the measure.\nVery many places, however, have radically different productivity rank positions depending on the chosen measure.\n\npip &lt;- pip %&gt;% \n  group_by(measure) %&gt;% \n  mutate(\n    rank = rank(value)\n  ) %&gt;% \n  group_by(Place) %&gt;% \n  mutate(\n    meanrank = mean(rank),\n    rankrange = max(rank) - min(rank)\n    )\n\n#Look at spread of rank positions for all places\n#Order by mean rank\nggplot(pip, aes(x = fct_reorder(Place, meanrank), y = rank)) +\n  geom_boxplot() +\n  coord_flip() +\n  xlab(\"\") +\n  ylab(\"rank (higher number is more productive)\")\n\n\n\n\nPicking out the top ten places with the widest difference in rank across measures and looking at how they change, for some there is clear opposite movement: Oxfordshire, very near highest rank for GVA per head, drops very far down for the other measures. Tees Valley goes in the opposite direction.\nIt looks like a geographical north-south pattern for which measure types and their rank range dominate. Oxfordshire and Gloucestershire start out with higher rank than Liverpool City Region and Tees, but those swap over entirely.\n\n#Pick out TEN of the largest rank spreads\ntop_places &lt;- pip %&gt;%\n  ungroup() %&gt;% \n  distinct(Place, rankrange) %&gt;% \n  arrange(desc(rankrange)) %&gt;%\n  slice_head(n = 10) %&gt;%\n  pull(Place)\n\n#Look at that for top rank movers\nggplot(pip %&gt;% filter(Place %in% top_places) %&gt;% ungroup() %&gt;% mutate(Place = fct_reorder(Place,-rankrange,mean)), aes(x = measure, y = rank, group = Place, colour = Place)) +\n  geom_line(size = 2) +\n  geom_point(size = 3) +\n  scale_color_brewer(palette = 'Paired', direction = -1) +\n  coord_flip() +\n  guides(colour=guide_legend(title=\"Place (ordered by rank range)\")) +\n  theme_minimal() +\n  xlab('') + ylab('Rank position (higher is more productive)')"
  },
  {
    "objectID": "gdp_gaps.html#identifying-regional-gaps-in-gvagdp-in-the-uk",
    "href": "gdp_gaps.html#identifying-regional-gaps-in-gvagdp-in-the-uk",
    "title": "GDP/GVA regional gaps in the UK",
    "section": "",
    "text": "We can get regional GVA/GDP data in a range of different flavours. Take a look at the page examining data from Beatty & Fothergill’s work on this, showing what difference choice of measure makes.\nOn this page, we’ll look at two GVA measures: GVA per hour worked and GVA per capita / per head of population. The code here compares South Yorkshire with the rest of the UK; it’s easy to adapt to other regions.\nThese two are a useful contrast for thinking about how interventions might change them, if we hope to improve productivity or output. For example, successfully moving people from inactivity into work (into most likely below average pay jobs) or creating new jobs that are below average productivity per hour, will lower the ‘GVA per hour’ number but increase GVA per capita.\n[To do: interactive dropdowns for different regions, possibly in Shiny]\nLet’s start with one of the most common measures of regional productivity, GVA per hour worked. Information on data sources is in the code comments, but note that the hourly work data comes from the Annual Population Survey and Labour Force Survey (see ‘measuring the data’ here at ONS). ONS say in their June 2023 analysis of this data:\n\n“Output per hour worked is the preferred measure of labour productivity, as hours worked are a more precise measure of labour input than jobs.”\n\nAlso here:\n\n“GVA per hour worked is considered a more comprehensive indicator of labour productivity and the preferred measure at subnational level. This is because GVA per filled job does not take into consideration regional labour market structures or different working patterns, such as the mix of part-time and full-time workers, industry structure and job shares.”\n\nFirst, the libraries we’ll use (and setting scipen to avoid any scientific notation):\n\nlibrary(tidyverse)\nlibrary(zoo)\nlibrary(sf)\nlibrary(tmap)\nlibrary(plotly)\noptions(scipen = 99)\n\nThen load in the data for both ITL2 and ITL3 regions:\n\n#ONS link to the Excel sheets: https://www.ons.gov.uk/economy/grossdomesticproductgdp/datasets/regionalgrossdomesticproductallnutslevelregions\n#Data folder name of downloaded Excel sheets (from which the CSVs below have been exported)\n#itlproductivity.xlsx\nperhourworked &lt;- read_csv('data/Table A4 Current Price unsmoothed GVA B per hour worked £ ITL2 and ITL3 subregions 2004 to 2021.csv') %&gt;% \nrename(ITL = `ITL level`, ITLcode = `ITL code`, region = `Region name`) %&gt;% \n  filter(ITL == 'ITL2') %&gt;% \n  pivot_longer(cols = `2004`:`2021`, names_to = 'year', values_to = 'gva') %&gt;% \n  mutate(year = as.numeric(year))\n\n#Repeat for ITL3\nperhourworked.itl3 &lt;- read_csv('data/Table A4 Current Price unsmoothed GVA B per hour worked £ ITL2 and ITL3 subregions 2004 to 2021.csv') %&gt;% \n  rename(ITL = `ITL level`, ITLcode = `ITL code`, region = `Region name`) %&gt;% \n  filter(ITL == 'ITL3') %&gt;% \n  pivot_longer(cols = `2004`:`2021`, names_to = 'year', values_to = 'gva') %&gt;% \n  mutate(year = as.numeric(year))\n\nAs the file names say, this is GVA per hour worked in current prices. That is, it’s the actual money amount for that specific ‘current’ year (2004 to 2021 in this data) - so it’s not inflation adjusted.\nGVA/GDP data comes in either current prices (CP) or chained volume (CV) numbers. CV data has been inflation-adjusted so that change over time can be looked at - but the adjustment is done for each region separately, meaning that the difference in scale between places will be slightly off. (You can check this in e.g. the sector data by summing the CV values for regions and noting that it does not match the total for the larger geographies they’re a part of.)\nIn practice, this means it’s best to use current prices data to compare between places and chained volume / inflation adjusted numbers to look at how specific places’ GVA/GDP changes over time.\nHowever, it is possible to examine change over time in the current prices data if we just examine relative change, either in how proportions change or - as the next code block does - in how the rank position of places changes.\nThe following code:\n\nFinds rank position of all places over time\nTakes a moving 3 year average of that rank to smooth a bit\nLabels different parts of the UK - North, South, London, South apart from London\nMakes an interactive plot of the rank change over time (comparing the years after coalition govt and most recent years before COVID) with South Yorkshire highlighted\n\n\n#Rank to see which ITL2 changed position the most\nperhourworked &lt;- perhourworked %&gt;% \n  group_by(year) %&gt;% \n  mutate(rank = rank(gva))\n\n#3 year smoothing\nperhourworked &lt;- perhourworked %&gt;% \n  arrange(year) %&gt;% \n  group_by(region) %&gt;%\n  mutate(\n    movingav = rollapply(gva,3,mean,align='center',fill=NA),\n    rank_movingav = rollapply(rank,3,mean,align='center',fill=NA),\n    rank_movingav_7yr = rollapply(rank,7,mean,align='center',fill=NA)\n    )\n\n#Picking out England and North etc...\n#Via https://github.com/DanOlner/regionalGVAbyindustry\n\n#Northern England\nnorth &lt;- perhourworked$region[grepl('Greater Manc|Merseyside|West Y|Cumbria|Cheshire|Lancashire|East Y|North Y|Tees|Northumb|South Y', perhourworked$region, ignore.case = T)] %&gt;% unique\n\n#South England\nsouth &lt;- perhourworked$region[!grepl('Greater Manc|Merseyside|West Y|Cumbria|Cheshire|Lancashire|East Y|North Y|Tees|Northumb|South Y|Scot|Highl|Wales|Ireland', perhourworked$region, ignore.case = T)] %&gt;% unique\n\n#South minus London\nsouth.minus.london &lt;- south[!grepl('london',south,ignore.case = T)]\n\n#England!\nengland &lt;- c(north,south)\n\n#England minus London\nengland.minus.london &lt;- england[!grepl('london',england,ignore.case = T)]\n\n#UK minus London\nuk.minus.london &lt;- perhourworked$region[!grepl('london',perhourworked$region,ignore.case = T)] %&gt;% unique\n\n#Add those regions into the per hour worked data\nperhourworked &lt;- perhourworked %&gt;% \n  mutate(ns_england_restofUK = case_when(\n    region %in% north ~ 'North England',\n    region %in% south ~ 'South Eng (inc. London)',\n    .default = 'Scot/Wales/NI'\n  ))\n\nperhourworked &lt;- perhourworked %&gt;% \n  mutate(ns_england_restofUK_londonseparate = case_when(\n    region %in% north ~ 'North England',\n    region %in% south.minus.london ~ 'South Eng (exc. London)',\n    grepl('london',region,ignore.case = T) ~ 'London',\n    .default = 'Scot/Wales/NI'\n  ))\n\n#And a category for 'UK minus London'\nperhourworked &lt;- perhourworked %&gt;% \n  mutate(UK_minus_london = case_when(\n    grepl('london',region,ignore.case = T) ~ 'London',\n    .default = 'UK minus London'\n  ))"
  },
  {
    "objectID": "gdp_gaps.html#finding-weighted-averages-for-per-hour-productivity",
    "href": "gdp_gaps.html#finding-weighted-averages-for-per-hour-productivity",
    "title": "GDP/GVA regional gaps in the UK",
    "section": "Finding weighted averages for per hour productivity",
    "text": "Finding weighted averages for per hour productivity\nWe want to compare specific places to the rest of the UK - and also, possibly, the rest of the UK minus London, because London is such an outlier. To do this, we’ll need average per-hour-productivity values for the UK as as a whole, as well as regional subsets.\nBut each place differs in size - the per-hour-productivity values for each need adjusting to account for that. Here, we’ll weight the averages by the total number of hours worked in each ITL2 zone. This data is available in another sheet from the regional GDP ONS data (stored here in the data folder as itlproductivity.xlsx).\nValues for one before the latest year in the data is used (2020) to match the centre point of the three year moving average.\nFirst, get the ‘total hours a week’ data and add in the regional labels:\n\n#WEIGHTED AVERAGES\n#Using number of hours worked per ITL2\n\n#Get hours worked per week total for ITL2\ntotalhoursperweek &lt;- read_csv('data/Productivity Hours Worked per Week ITL2 and ITL3 subregions constrained to ITL1 2004 2021.csv') %&gt;%\n  rename(ITL = `ITL level`, ITLcode = `ITL code`, region = `Region name`) %&gt;% \n  filter(ITL == 'ITL2') %&gt;% \n  pivot_longer(cols = `2004`:`2021`, names_to = 'year', values_to = 'hours_per_week') %&gt;% \n  mutate(year = as.numeric(year))\n\n#And same for ITL3 regions\ntotalhoursperweek.itl3 &lt;- read_csv('data/Productivity Hours Worked per Week ITL2 and ITL3 subregions constrained to ITL1 2004 2021.csv') %&gt;%\n  rename(ITL = `ITL level`, ITLcode = `ITL code`, region = `Region name`) %&gt;% \n  filter(ITL == 'ITL3') %&gt;% \n  pivot_longer(cols = `2004`:`2021`, names_to = 'year', values_to = 'hours_per_week') %&gt;% \n  mutate(year = as.numeric(year))\n\n\n\n\n# #Add in all the region labels\n# totalhoursperweek.itl2 &lt;- totalhoursperweek.itl2 %&gt;% \n#   mutate(ns_england_restofUK = case_when(\n#     region %in% north ~ 'North England',\n#     region %in% south ~ 'South Eng (inc. London)',\n#     .default = 'rest of UK'\n#   ))\n# \n# totalhoursperweek.itl2 &lt;- totalhoursperweek.itl2 %&gt;% \n#   mutate(ns_england_restofUK_londonseparate = case_when(\n#     region %in% north ~ 'North England',\n#     region %in% south.minus.london ~ 'South Eng (exc. London)',\n#     grepl('london',region,ignore.case = T) ~ 'London',\n#     .default = 'rest of UK'\n#   ))\n# \n# totalhoursperweek.itl2 &lt;- totalhoursperweek.itl2 %&gt;% \n#   mutate(UK_minus_london = case_when(\n#     grepl('london',region,ignore.case = T) ~ 'London',\n#     .default = 'UK minus London'\n#   ))\n\nNext, join to the GVA per hour data, for 2020, and then get weighted averages for specific regions (including the whole of the UK minus London):\n\nperhourworked.withtotalhours &lt;- perhourworked %&gt;% filter(year == 2020) %&gt;% \n  ungroup() %&gt;% \n  left_join(\n    totalhoursperweek %&gt;% filter(year == 2020) %&gt;% select(region,hours_per_week),\n    by = 'region'\n  )\n\n#UK weighted average INCLUDING London\nweightedaverages.perhourworked.UK &lt;- perhourworked.withtotalhours %&gt;% \n  summarise(\n    sy = perhourworked %&gt;% filter(year == 2020, region == 'South Yorkshire') %&gt;% select(movingav) %&gt;% pull,#put SY in there to directly compare\n    mean_gva_av3years_weighted = weighted.mean(movingav, hours_per_week, na.rm=T)#get weighted average by each ITL2 grouping\n  ) %&gt;% \n  mutate(\n    prop_diff = (mean_gva_av3years_weighted - sy)/sy\n  )\n\n\n##UK weighted average EXCLUDING London (and comparing JUST to London)\nweightedaverages.perhourworked.UKminuslondon &lt;- perhourworked.withtotalhours %&gt;% \n  group_by(UK_minus_london) %&gt;% #group by \"UK minus london\" vs \"london by itself\"\n  summarise(\n    sy = perhourworked %&gt;% filter(year == 2020, region == 'South Yorkshire') %&gt;% select(movingav) %&gt;% pull,#put SY in there to directly compare\n    mean_gva_av3years_weighted = weighted.mean(movingav, hours_per_week, na.rm=T)#get weighted average by each ITL2 grouping\n  ) %&gt;% \n  mutate(\n    prop_diff = (mean_gva_av3years_weighted - sy)/sy\n  )\n\n#So SY would need to be ~17.7% more productive to match non London UK average\n\n#Weighted averages, comparison to rest of North\nweightedaverages.perhourworked.north &lt;- perhourworked.withtotalhours %&gt;% \n  group_by(ns_england_restofUK_londonseparate) %&gt;% #group by \"UK minus london\" vs \"london by itself\"\n  summarise(\n    sy = perhourworked %&gt;% filter(year == 2020, region == 'South Yorkshire') %&gt;% select(movingav) %&gt;% pull,\n    mean_gva_av3years_weighted = weighted.mean(movingav, hours_per_week, na.rm=T)#get weighted average by each ITL2 grouping\n  ) %&gt;% \n  mutate(\n    prop_diff = (mean_gva_av3years_weighted - sy)/sy\n  )\n\n\n#Sanity check the weighted average manually, check with london\n#TICK\nchk &lt;- perhourworked %&gt;% filter(year == 2020) %&gt;% \n  left_join(\n    totalhoursperweek %&gt;% filter(year == 2020) %&gt;% select(region,hours_per_week),\n    by = 'region'\n  ) %&gt;% filter(grepl('london',region,ignore.case = T)) %&gt;% \n  ungroup() %&gt;% \n  mutate(hours_per_week_normalised = hours_per_week / sum(hours_per_week)) %&gt;% \n  mutate(\n    manualweightedav_weights = movingav * hours_per_week_normalised,\n    manualweightedav = sum(manualweightedav_weights)\n    )"
  },
  {
    "objectID": "gdp_gaps.html#repeat-for-sheffield-vs-bdr",
    "href": "gdp_gaps.html#repeat-for-sheffield-vs-bdr",
    "title": "GDP/GVA regional gaps in the UK",
    "section": "Repeat for Sheffield vs BDR",
    "text": "Repeat for Sheffield vs BDR\n\n#Test if ITL3 codes nest handily into ITL2 and so can act as lookup for the regions I've already labelled above (rather than having to intersect)\n\n#Tick! Probably. Need to check...\ntable(str_sub(perhourworked.itl3$ITLcode,1,-2) %in% perhourworked$ITLcode)\n\n\nTRUE \n3222 \n\n#Add the probably-ITL2 code lookup to ITL3 data\nperhourworked.itl3 &lt;- perhourworked.itl3 %&gt;% \n  mutate(\n    ITL2code = str_sub(perhourworked.itl3$ITLcode,1,-2)\n  )\n\n#Merge in region labels from the ITL2 data\nperhourworked.itl3 &lt;- perhourworked.itl3 %&gt;% \n  left_join(\n    perhourworked %&gt;% ungroup() %&gt;% distinct(ITLcode, ns_england_restofUK, ns_england_restofUK_londonseparate) %&gt;% select(ITL2code = ITLcode, ns_england_restofUK, ns_england_restofUK_londonseparate),\n    by = 'ITL2code'\n  )\n\n#No newcastle, where's that gone? Oh it's Tyne\n# tmap_mode('view')\n# \n# tm_shape(perhourworked.itl3.geo) +\n#   tm_polygons(id = 'region') +\n#   tm_layout(title = '', legend.outside = T)\n\n\n#Add in an extra one for the shortlist of 11 'core cities'\n#Belfast, Birmingham, Bristol, Cardiff, Glasgow, Leeds, Liverpool, Manchester, Newcastle, Nottingham, Sheffield\n#https://www.corecities.com/about-us/what-core-cities-uk\n\n#Check how many we match... Tyneside for Newcastle, then all good\ncorecities &lt;- perhourworked.itl3$region[grepl(x = perhourworked.itl3$region, pattern = 'sheffield|Belfast|Birmingham|Bristol|Cardiff|Glasgow|Leeds|Liverpool|Manchester|Tyne|Nottingham', ignore.case = T)] %&gt;% unique\n\n#Yes, all in there, need to remove a few...\ncorecities &lt;- corecities[!grepl(x = corecities, pattern = 'Greater|shire', ignore.case = T)]\ncorecities &lt;- corecities[order(corecities)]\n\nperhourworked.itl3 &lt;- perhourworked.itl3 %&gt;% \n  mutate(\n    core_cities = ifelse(region %in% corecities, 'Core city', 'Other'),\n    core_cities_minus_sheffield = ifelse(region %in% corecities[corecities!='Sheffield'],'Core city (exc. Sheffield)','Other')#without sheffield, so not including in weighted average\n    )\n\n\n#Check map\n# itl3.geo &lt;- st_read('data/ITL_geographies/International_Territorial_Level_3_January_2021_UK_BUC_V3_2022_6920195468392554877/ITL3_JAN_2021_UK_BUC_V3.shp') %&gt;%\n#   st_simplify(preserveTopology = T, dTolerance = 100)\n# \n# \n# #Ticks all round\n# plot(st_geometry(itl3.geo), col = 'grey')\n# \n# plot(st_geometry(itl3.geo %&gt;% filter(ITL321CD %in% perhourworked.itl3$ITLcode[perhourworked.itl3$ns_england_restofUK_londonseparate=='North England'])), col = 'red', add  = T)\n# \n# plot(st_geometry(itl3.geo %&gt;% filter(ITL321CD %in% perhourworked.itl3$ITLcode[perhourworked.itl3$ns_england_restofUK_londonseparate=='South Eng (exc. London)'])), col = 'blue', add = T)\n# \n# plot(st_geometry(itl3.geo %&gt;% filter(ITL321CD %in% perhourworked.itl3$ITLcode[perhourworked.itl3$ns_england_restofUK_londonseparate=='London'])), col = 'green', add = T)\n# \n# plot(st_geometry(itl3.geo %&gt;% filter(ITL321CD %in% perhourworked.itl3$ITLcode[perhourworked.itl3$ns_england_restofUK_londonseparate=='rest of UK'])), col = 'orange', add = T)\n# \n# \n\n\n#Repeat rank plot\nperhourworked.itl3 &lt;- perhourworked.itl3 %&gt;% \n  group_by(year) %&gt;% \n  mutate(rank = rank(gva))\n\n#3 year smoothing\nperhourworked.itl3 &lt;- perhourworked.itl3 %&gt;% \n  arrange(year) %&gt;% \n  group_by(region) %&gt;%\n  mutate(\n    movingav = rollapply(gva,3,mean,align='right',fill=NA),\n    rank_movingav = rollapply(rank,3,mean,align='right',fill=NA),\n    rank_movingav_7yr = rollapply(rank,7,mean,align='right',fill=NA)\n    )\n\n\nperhourworked.itl3 &lt;- perhourworked.itl3 %&gt;% \n  mutate(selectedregion = grepl(x = region, pattern = 'Shef|Doncaster',ignore.case = T))\n\n#How many years available with smoothed 3 year data?\n#2006 to 2021\nunique(perhourworked.itl3$year[!is.na(perhourworked.itl3$movingav)])\n\np &lt;- ggplot(perhourworked.itl3 %&gt;% filter(year %in% c(2006,2018)), aes(x = factor(year), y = rank_movingav, group = region, color = factor(year))) +\n  geom_line(aes(group = region), color = \"grey44\") +\n  geom_point(aes(shape = selectedregion, size = selectedregion)) +\n  facet_wrap(vars(ns_england_restofUK_londonseparate), nrow = 1) +\n  ylab('rank (3 year average)') +\n  xlab('year (average centre)') +\n  guides(colour=\"none\", shape = \"none\", size = \"none\") +\n  theme_bw()\n\nggplotly(p, tooltip = c('region','rank_movingav'))\n\n\n#Split into dropped vs rose, plot separately\n#Has to be for specific pair of years so let's pick those year\nstartyear = 2012\nendyear = 2020\n\npolarity &lt;- perhourworked.itl3 %&gt;% \n  ungroup() %&gt;% \n  filter(year %in% c(startyear, endyear)) %&gt;% \n  select(region,year,rank_movingav) %&gt;% \n  pivot_wider(names_from = year, values_from = rank_movingav) %&gt;% \n  mutate(\n    roseovertime = !!as.name(startyear) &lt; !!as.name(endyear),\n    rankpositionchange = !!as.name(endyear) - !!as.name(startyear)\n    )\n\n#Drop if repeating\nperhourworked.itl3 &lt;- perhourworked.itl3[,1:13]\n\n#Add that label back into perhourworked.itl3\nperhourworked.itl3 &lt;- perhourworked.itl3 %&gt;% \n  left_join(polarity %&gt;% select(region, roseovertime, rankpositionchange), by = 'region')\n\np &lt;- ggplot(perhourworked.itl3 %&gt;% filter(year %in% c(2006,2012,2018)), aes(x = factor(year), y = rank_movingav, group = region, color = factor(year))) +\n  geom_line(aes(group = region), color = \"grey44\") +\n  geom_point(aes(shape = selectedregion, size = selectedregion)) +\n  facet_wrap(vars(roseovertime,ns_england_restofUK_londonseparate), nrow = 2) +\n  ylab('rank (3 year average)') +\n  xlab('year (average centre)') +\n  guides(colour=\"none\", shape = \"none\", size = \"none\") +\n  theme_bw()\n\nggplotly(p, tooltip = c('region','rank_movingav'))\n\n\n#Any kind of geography to that?\n# perhourworked.itl3.geo &lt;- itl3.geo %&gt;% \n#   right_join(perhourworked.itl3, by = c('ITL321CD' = 'ITLcode'))\n# \n# tm_shape(perhourworked.itl3.geo) +\n#   tm_polygons('rankpositionchange', n = 9, palette = 'BrBG') +\n#   tm_layout(title = '', legend.outside = T)"
  },
  {
    "objectID": "gdp_gaps.html#version-of-gva-per-hour-worked-gap-over-time",
    "href": "gdp_gaps.html#version-of-gva-per-hour-worked-gap-over-time",
    "title": "GDP/GVA regional gaps in the UK",
    "section": "Version of GVA per hour worked gap over time:",
    "text": "Version of GVA per hour worked gap over time:\n\nperhourworked.withtotalhours &lt;- perhourworked %&gt;% \n  ungroup() %&gt;% \n  select(-c(movingav,rank_movingav,rank_movingav_7yr)) %&gt;% #drop moving averages, redo after\n  left_join(\n    totalhoursperweek %&gt;% select(region,hours_per_week,year),\n    by = c('region','year')\n  )\n\n\n#Weighted averages\nweightedaverages.perhourworked.UKminuslondon &lt;- perhourworked.withtotalhours %&gt;% \n  rename(region_grouping = UK_minus_london) %&gt;% \n  group_by(region_grouping,year) %&gt;%\n  summarise(\n    weighted_mean_gva = weighted.mean(gva, hours_per_week, na.rm=T)#get weighted average by each ITL2 grouping\n  ) %&gt;% #merge in SY values\n  left_join(perhourworked %&gt;% filter(region == 'South Yorkshire') %&gt;% ungroup() %&gt;% select(year, SouthYorks_gva = gva), by = c('year')) %&gt;% \n  mutate(\n    prop_diff = (weighted_mean_gva - SouthYorks_gva)/SouthYorks_gva,\n    prop_diff_3yrsmooth = rollapply(prop_diff,3,mean,align='center',fill=NA),\n  ) \n\n#gosh that gap is increasing.\nggplot(weightedaverages.perhourworked.UKminuslondon, aes(x = year, y = prop_diff_3yrsmooth * 100, colour = region_grouping)) +\n  geom_line() +\n  geom_point(size = 2) +\n  coord_cartesian(ylim = c(0,80))\n\n\n\n#For other groupings...\nweightedaverages.perhourworked.regions &lt;- perhourworked.withtotalhours %&gt;% \n  rename(region_grouping = ns_england_restofUK_londonseparate) %&gt;% \n  group_by(region_grouping,year) %&gt;%\n  summarise(\n    weighted_mean_gva = weighted.mean(gva, hours_per_week, na.rm=T)#get weighted average by each ITL2 grouping\n  ) %&gt;% #merge in SY values\n  left_join(perhourworked %&gt;% filter(region == 'South Yorkshire') %&gt;% ungroup() %&gt;% select(year, SouthYorks_gva = gva), by = c('year')) %&gt;% \n  mutate(\n    prop_diff = (weighted_mean_gva - SouthYorks_gva)/SouthYorks_gva,\n    prop_diff_3yrsmooth = rollapply(prop_diff,3,mean,align='center',fill=NA),\n  ) \n\nggplot(weightedaverages.perhourworked.regions, aes(x = year, y = prop_diff_3yrsmooth * 100, colour = region_grouping)) +\n  geom_line() +\n  geom_point(size = 2) +\n  coord_cartesian(ylim = c(0,80))"
  },
  {
    "objectID": "gdp_gaps.html#repeat-for-itl3",
    "href": "gdp_gaps.html#repeat-for-itl3",
    "title": "GDP/GVA regional gaps in the UK",
    "section": "Repeat for ITL3",
    "text": "Repeat for ITL3\n\n#Check region match... tick\n# table(perhourworked.itl3$region %in% totalhoursperweek.itl3$region)\n\n#Join \nperhourworked.withtotalhours.itl3 &lt;- perhourworked.itl3 %&gt;% \n  ungroup() %&gt;% \n  # select(-c(movingav,rank_movingav,rank_movingav_7yr)) %&gt;% #drop moving averages, redo after\n  left_join(\n    totalhoursperweek.itl3 %&gt;% select(region,hours_per_week,year),\n    by = c('region','year')\n  )\n\n\n\n#For other groupings...\nweightedaverages.perhourworked.itl3.regions &lt;- perhourworked.withtotalhours.itl3 %&gt;% \n  rename(region_grouping = ns_england_restofUK_londonseparate) %&gt;% \n  group_by(region_grouping,year) %&gt;%\n  summarise(\n    weighted_mean_gva = weighted.mean(gva, hours_per_week, na.rm=T)#get weighted average by each ITL2 grouping\n  ) %&gt;% #merge in SY values\n  left_join(perhourworked.itl3 %&gt;% filter(region == 'Sheffield') %&gt;% ungroup() %&gt;% select(year, Sheffield_gva = gva), by = c('year')) %&gt;% \n  left_join(perhourworked.itl3 %&gt;% filter(grepl(x = region, pattern = 'Barnsley', ignore.case = T)) %&gt;% ungroup() %&gt;% select(year, BDR_gva = gva), by = c('year')) \n\n#Repeat for core cities exc Sheffield\nweightedaverages.perhourworked.itl3.cores &lt;- perhourworked.withtotalhours.itl3 %&gt;% \n  rename(region_grouping = core_cities_minus_sheffield) %&gt;% \n  group_by(region_grouping,year) %&gt;%\n  summarise(\n    weighted_mean_gva = weighted.mean(gva, hours_per_week, na.rm=T)#get weighted average by each ITL2 grouping\n  ) %&gt;% #merge in SY values\n  left_join(perhourworked.itl3 %&gt;% filter(region == 'Sheffield') %&gt;% ungroup() %&gt;% select(year, Sheffield_gva = gva), by = c('year')) %&gt;% \n  left_join(perhourworked.itl3 %&gt;% filter(grepl(x = region, pattern = 'Barnsley', ignore.case = T)) %&gt;% ungroup() %&gt;% select(year, BDR_gva = gva), by = c('year')) \n\n\n#Append those two\nweightedavs.itl3 &lt;- rbind(\n  weightedaverages.perhourworked.itl3.regions,\n  weightedaverages.perhourworked.itl3.cores %&gt;% filter(region_grouping!='Other')\n)\n\n#Make Sheffield and BDR gva long, and find proportion diffs\nweightedavs.itl3 &lt;- weightedavs.itl3 %&gt;% \n  pivot_longer(cols = Sheffield_gva:BDR_gva, names_to = 'place', values_to = 'gva') %&gt;% \n  mutate(\n    prop_diff = (weighted_mean_gva - gva)/gva\n  ) %&gt;% \n  arrange(year) %&gt;% \n  group_by(region_grouping,place) %&gt;% \n  mutate(\n    prop_diff_3yrsmooth = rollapply(prop_diff,3,mean,align='center',fill=NA),\n    prop_diff_5yrsmooth = rollapply(prop_diff,5,mean,align='center',fill=NA),\n  )\n\nggplot(weightedavs.itl3 %&gt;% filter(region_grouping!='London'), aes(x = year, y = prop_diff_3yrsmooth * 100, colour = region_grouping)) +\n# ggplot(weightedavs.itl3 %&gt;% filter(region_grouping!='London', !is.na(prop_diff_5yrsmooth)), aes(x = year, y = prop_diff_5yrsmooth * 100, colour = region_grouping)) +\n# ggplot(weightedavs.itl3, aes(x = year, y = prop_diff * 100, colour = region_grouping)) +\n  geom_line() +\n  geom_point(size = 2) +\n  coord_cartesian(ylim = c(-1,30)) +\n  geom_hline(yintercept = 0, alpha = 0.2, size = 2) +\n  facet_wrap(~place)\n\n\n\n#VERSION TO DIRECTLY COMPARE SHEFFIELD TO OTHER 'CORE CITIES'\n#Exclude Sheffield, as we want % diff for Sheffield, will add as own column\n#Don't need hours per week as using direct GVA comparison, no need for weighted av\ncomparator = 'Sheffield'\n# # comparator = 'Manchester'\n# comparator = 'Leeds'\n\ncorecompare &lt;- perhourworked.withtotalhours.itl3 %&gt;%\n  select(region, year, gva) %&gt;% \n  filter(region %in% corecities[corecities!=comparator]) %&gt;% \n  left_join(\n    perhourworked.withtotalhours.itl3 %&gt;%\n      filter(region ==comparator) %&gt;% \n      select(year, sheffield_gva = gva),\n  by = 'year'\n  ) %&gt;% \n  mutate(prop_diff = (gva - sheffield_gva)/sheffield_gva) %&gt;% \n  group_by(region) %&gt;% \n  mutate(\n    prop_diff_3yrsmooth = rollapply(prop_diff,3,mean,align='center',fill=NA),\n    prop_diff_5yrsmooth = rollapply(prop_diff,5,mean,align='center',fill=NA),\n  )\n\n\n\nggplot(corecompare, aes(x = year, y = prop_diff_3yrsmooth * 100, colour = fct_reorder(region, prop_diff_5yrsmooth))) +\n# ggplot(corecompare, aes(x = year, y = prop_diff * 100, colour = fct_reorder(region, prop_diff))) +\n  geom_line() +\n  geom_point(size = 2) +\n  # coord_cartesian(ylim = c(-1,30)) +\n  geom_hline(yintercept = 0, alpha = 0.2, size = 2) +\n  scale_color_brewer(palette = 'Paired')"
  },
  {
    "objectID": "gdp_gaps.html#gva-per-hour-worked-gap-over-time",
    "href": "gdp_gaps.html#gva-per-hour-worked-gap-over-time",
    "title": "GDP/GVA regional gaps in the UK",
    "section": "GVA per hour worked: gap over time",
    "text": "GVA per hour worked: gap over time\n\nperhourworked.withtotalhours &lt;- perhourworked %&gt;% \n  ungroup() %&gt;% \n  select(-c(movingav,rank_movingav,rank_movingav_7yr)) %&gt;% #drop moving averages, redo after\n  left_join(\n    totalhoursperweek %&gt;% select(region,hours_per_week,year),\n    by = c('region','year')\n  )\n\n\n#Weighted averages\nweightedaverages.perhourworked.UKminuslondon &lt;- perhourworked.withtotalhours %&gt;% \n  rename(region_grouping = UK_minus_london) %&gt;% \n  group_by(region_grouping,year) %&gt;%\n  summarise(\n    weighted_mean_gva = weighted.mean(gva, hours_per_week, na.rm=T)#get weighted average by each ITL2 grouping\n  ) %&gt;% #merge in SY values\n  left_join(perhourworked %&gt;% filter(region == 'South Yorkshire') %&gt;% ungroup() %&gt;% select(year, SouthYorks_gva = gva), by = c('year')) %&gt;% \n  mutate(\n    prop_diff = (weighted_mean_gva - SouthYorks_gva)/SouthYorks_gva,\n    prop_diff_3yrsmooth = rollapply(prop_diff,3,mean,align='center',fill=NA),\n  ) \n\nggplot(weightedaverages.perhourworked.UKminuslondon, aes(x = year, y = prop_diff_3yrsmooth * 100, colour = region_grouping)) +\n  geom_line() +\n  geom_point(size = 2) +\n  coord_cartesian(ylim = c(0,80))\n\n\n\n#For other groupings...\nweightedaverages.perhourworked.regions &lt;- perhourworked.withtotalhours %&gt;% \n  rename(region_grouping = ns_england_restofUK_londonseparate) %&gt;% \n  group_by(region_grouping,year) %&gt;%\n  summarise(\n    weighted_mean_gva = weighted.mean(gva, hours_per_week, na.rm=T)#get weighted average by each ITL2 grouping\n  ) %&gt;% #merge in SY values\n  left_join(perhourworked %&gt;% filter(region == 'South Yorkshire') %&gt;% ungroup() %&gt;% select(year, SouthYorks_gva = gva), by = c('year')) %&gt;% \n  mutate(\n    prop_diff = (weighted_mean_gva - SouthYorks_gva)/SouthYorks_gva,\n    prop_diff_3yrsmooth = rollapply(prop_diff,3,mean,align='center',fill=NA),\n  ) \n\nggplot(weightedaverages.perhourworked.regions, aes(x = year, y = prop_diff_3yrsmooth * 100, colour = region_grouping)) +\n  geom_line() +\n  geom_point(size = 2) +\n  coord_cartesian(ylim = c(0,80))\n\n\n\n#COMPARE TO SELECTION OF ITL2 ZONES / OTHER MCAs\n\n#VERSION TO DIRECTLY COMPARE SY TO OTHER MCAS\n#List of ITL2\nunique(perhourworked.withtotalhours$region)\n\n [1] \"Tees Valley and Durham\"                          \n [2] \"Northumberland, and Tyne and Wear\"               \n [3] \"Cumbria\"                                         \n [4] \"Greater Manchester\"                              \n [5] \"Lancashire\"                                      \n [6] \"Cheshire\"                                        \n [7] \"Merseyside\"                                      \n [8] \"East Yorkshire and Northern Lincolnshire\"        \n [9] \"North Yorkshire\"                                 \n[10] \"South Yorkshire\"                                 \n[11] \"West Yorkshire\"                                  \n[12] \"Derbyshire and Nottinghamshire\"                  \n[13] \"Leicestershire, Rutland and Northamptonshire\"    \n[14] \"Lincolnshire\"                                    \n[15] \"Herefordshire, Worcestershire and Warwickshire\"  \n[16] \"Shropshire and Staffordshire\"                    \n[17] \"West Midlands\"                                   \n[18] \"East Anglia\"                                     \n[19] \"Bedfordshire and Hertfordshire\"                  \n[20] \"Essex\"                                           \n[21] \"Inner London - West\"                             \n[22] \"Inner London - East\"                             \n[23] \"Outer London - East and North East\"              \n[24] \"Outer London - South\"                            \n[25] \"Outer London - West and North West\"              \n[26] \"Berkshire, Buckinghamshire and Oxfordshire\"      \n[27] \"Surrey, East and West Sussex\"                    \n[28] \"Hampshire and Isle of Wight\"                     \n[29] \"Kent\"                                            \n[30] \"Gloucestershire, Wiltshire and Bath/Bristol area\"\n[31] \"Dorset and Somerset\"                             \n[32] \"Cornwall and Isles of Scilly\"                    \n[33] \"Devon\"                                           \n[34] \"West Wales and The Valleys\"                      \n[35] \"East Wales\"                                      \n[36] \"North Eastern Scotland\"                          \n[37] \"Highlands and Islands\"                           \n[38] \"Eastern Scotland\"                                \n[39] \"West Central Scotland\"                           \n[40] \"Southern Scotland\"                               \n[41] \"Northern Ireland\"                                \n\n#Selection... don't think we have an easy ITL2 East Mids match, will have to come back to...\nmcas &lt;- perhourworked.withtotalhours$region[grepl('South Y|Manc|West Y|West M|Tyne|Tees|West of Eng|North Y|Liverpool|East M', perhourworked.withtotalhours$region, ignore.case = T)] %&gt;% unique\n\n#MCA to get proportion gaps to others\ncomparator = perhourworked.withtotalhours$region[grepl('South Y', perhourworked.withtotalhours$region, ignore.case = T)] %&gt;% unique\n# comparator = perhourworked.withtotalhours$region[grepl('Greater M', perhourworked.withtotalhours$region, ignore.case = T)] %&gt;% unique\n\nmcacompare &lt;- perhourworked.withtotalhours %&gt;%\n  select(region, year, gva) %&gt;% \n  filter(region %in% mcas[mcas!=comparator]) %&gt;% \n  left_join(\n    perhourworked.withtotalhours %&gt;%\n      filter(region ==comparator) %&gt;% \n      select(year, comp_gva = gva),\n  by = 'year'\n  ) %&gt;% \n  mutate(prop_diff = (gva - comp_gva)/comp_gva) %&gt;% \n  group_by(region) %&gt;% \n  mutate(\n    prop_diff_3yrsmooth = rollapply(prop_diff,3,mean,align='center',fill=NA),\n    prop_diff_5yrsmooth = rollapply(prop_diff,5,mean,align='center',fill=NA),\n  )\n\nggplot(mcacompare, aes(x = year, y = prop_diff_3yrsmooth * 100, colour = fct_reorder(region, prop_diff_5yrsmooth))) +\n# ggplot(corecompare, aes(x = year, y = prop_diff * 100, colour = fct_reorder(region, prop_diff))) +\n  geom_line() +\n  geom_point(size = 2) +\n  # coord_cartesian(ylim = c(-1,30)) +\n  geom_hline(yintercept = 0, alpha = 0.2, size = 2) +\n  scale_color_brewer(palette = 'Paired')"
  },
  {
    "objectID": "gdp_gaps.html#compare-places-using-gva-per-capita",
    "href": "gdp_gaps.html#compare-places-using-gva-per-capita",
    "title": "GDP/GVA regional gaps in the UK",
    "section": "Compare places using GVA per capita",
    "text": "Compare places using GVA per capita\n\n#Get population numbers for per person figures\n#From regionalgrossvalueaddedbalancedbyindustryandallitlregions.xlsx\n#ONS mid year population estimates\n#Table 6 (not sure where they got consistent ITL2 geogs from...)\npersoncounts &lt;- read_csv('data/Table 6 Total resident population numbers persons Apr2024.csv') %&gt;% \n# personcounts &lt;- read_csv('data/Table 6 Total resident population numbers persons.csv') %&gt;% \n  rename(ITLcode = `ITL code`, region = `Region name`) %&gt;% \n  filter(ITL == 'ITL2') %&gt;% \n  pivot_longer(cols = `1998`:`2021`, names_to = 'year', values_to = 'personcount') %&gt;% \n  mutate(year = as.numeric(year))\n\n#Total GVA in current basic prices from the same source\ngva.cp &lt;- read_csv('data/Table 1 GVA balanced at current basic prices millions Apr2024.csv') %&gt;% \n# gva.cp &lt;- read_csv('data/Table 1 GVA balanced at current basic prices millions.csv') %&gt;% \n  rename(ITLcode = `ITL code`, region = `Region name`) %&gt;% \n  filter(ITL == 'ITL2') %&gt;% \n  pivot_longer(cols = `1998`:`2021`, names_to = 'year', values_to = 'gva') %&gt;% \n  mutate(year = as.numeric(year))\n\n#Add person counts in to get GVA per capita\n#Check link match... tick\ntable(personcounts$region %in% gva.cp$region)\n\n\nTRUE \n 984 \n\ngva.cp &lt;- gva.cp %&gt;% \n  left_join(\n    personcounts %&gt;% select(region, year, personcount),\n    by = c('region','year')\n  ) %&gt;% \n  mutate(\n    gva_per_capita = (gva / personcount) * 1000000\n    )\n\n\n#Add in region labels as before\ngva.cp &lt;- gva.cp %&gt;% \n  mutate(ns_england_restofUK = case_when(\n    region %in% north ~ 'North England',\n    region %in% south ~ 'South Eng (inc. London)',\n    .default = 'rest of UK'\n  ))\n\n#Check full match\ntable(gva.cp$ns_england_restofUK, useNA = 'always')\n\n\n          North England              rest of UK South Eng (inc. London) \n                    264                     216                     504 \n                   &lt;NA&gt; \n                      0 \n\ngva.cp &lt;- gva.cp %&gt;% \n  mutate(ns_england_restofUK_londonseparate = case_when(\n    region %in% north ~ 'North England',\n    region %in% south.minus.london ~ 'South Eng (exc. London)',\n    grepl('london',region,ignore.case = T) ~ 'London',\n    .default = 'rest of UK'\n  ))\n\ntable(gva.cp$ns_england_restofUK_londonseparate, useNA = 'always')\n\n\n                 London           North England              rest of UK \n                    120                     264                     216 \nSouth Eng (exc. London)                    &lt;NA&gt; \n                    384                       0 \n\n#And a category for 'UK minus London'\ngva.cp &lt;- gva.cp %&gt;% \n  mutate(UK_minus_london = case_when(\n    grepl('london',region,ignore.case = T) ~ 'London',\n    .default = 'UK minus London'\n  ))\n\ntable(gva.cp$UK_minus_london, useNA = 'always')\n\n\n         London UK minus London            &lt;NA&gt; \n            120             864               0 \n\n#Changing ranks\ngva.cp &lt;- gva.cp %&gt;% \n  group_by(year) %&gt;% \n  mutate(rank = rank(gva_per_capita))\n\n#3 year smoothing\ngva.cp &lt;- gva.cp %&gt;% \n  arrange(year) %&gt;% \n  group_by(region) %&gt;%\n  mutate(\n    movingav = rollapply(gva_per_capita,3,mean,align='center',fill=NA),\n    rank_movingav = rollapply(rank,3,mean,align='center',fill=NA)\n    )\n\n\n#Highlight South Yorkshire\ngva.cp &lt;- gva.cp %&gt;% \n  mutate(selectedregion = region == 'South Yorkshire')\n\n#Plot: first coalition years to pre covid\np &lt;- ggplot(gva.cp %&gt;% filter(year %in% c(1999,2006,2012,2018)), aes(x = factor(year), y = rank_movingav, group = region, color = factor(year))) +\n  geom_line(aes(group = region), color = \"grey44\") +\n  geom_point(aes(shape = selectedregion, size = selectedregion)) +\n  facet_wrap(vars(ns_england_restofUK_londonseparate), nrow = 1) +\n  ylab('rank (3 year average)') +\n  xlab('year (average centre)') +\n  guides(colour=\"none\", shape = \"none\", size = \"none\") +\n  theme_bw()\n\nggplotly(p, tooltip = c('region','rank_movingav'))"
  },
  {
    "objectID": "gdp_gaps.html#proportion-diffs-for-itl2-gva-per-capita",
    "href": "gdp_gaps.html#proportion-diffs-for-itl2-gva-per-capita",
    "title": "GDP/GVA regional gaps in the UK",
    "section": "PROPORTION DIFFS FOR ITL2 GVA PER CAPITA",
    "text": "PROPORTION DIFFS FOR ITL2 GVA PER CAPITA\n\n#For region grouping... Weight averages by population\nweightedaverages.gva.cp.regions &lt;- gva.cp %&gt;% \n  rename(region_grouping = ns_england_restofUK_londonseparate) %&gt;% \n  group_by(region_grouping,year) %&gt;%\n  summarise(\n    weighted_mean_gva = weighted.mean(gva_per_capita, personcount, na.rm=T)#get weighted average by each ITL2 grouping\n  ) %&gt;% #merge in SY values\n  left_join(gva.cp %&gt;% filter(region == 'South Yorkshire') %&gt;% ungroup() %&gt;% select(year, SY_gva = gva_per_capita), by = c('year'))  \n\n\n\n\n#Repeat for MCA average minus SY\nweightedaverages.gva.cp.mcas &lt;- gva.cp %&gt;% \n  mutate(region_grouping = ifelse(region %in% mcas[mcas!='South Yorkshire'], 'MCAs exc. SY','Other')) %&gt;% \n  group_by(region_grouping,year) %&gt;%\n  summarise(\n    weighted_mean_gva = weighted.mean(gva_per_capita, personcount, na.rm=T)#get weighted average by each ITL2 grouping\n  ) %&gt;% #merge in SY values\n  left_join(gva.cp %&gt;% filter(region == 'South Yorkshire') %&gt;% ungroup() %&gt;% select(year, SY_gva = gva_per_capita), by = c('year'))\n\n\n#Append those two\nweightedavs.gva.cp &lt;- rbind(\n  weightedaverages.gva.cp.regions,\n  weightedaverages.gva.cp.mcas %&gt;% filter(region_grouping!='Other')\n)\n\n#Smooth\nweightedavs.gva.cp &lt;- weightedavs.gva.cp %&gt;% \n  mutate(\n    prop_diff = (weighted_mean_gva - SY_gva)/SY_gva\n  ) %&gt;% \n  arrange(year) %&gt;% \n  group_by(region_grouping) %&gt;% \n  mutate(\n    prop_diff_3yrsmooth = rollapply(prop_diff,3,mean,align='center',fill=NA),\n    prop_diff_5yrsmooth = rollapply(prop_diff,5,mean,align='center',fill=NA),\n  )\n\n#Plain prop diff in per capita numbers looks smoothed already / isn't reliant on small samples?\n# ggplot(weightedavs.gva.cp, aes(x = year, y = prop_diff * 100, colour = region_grouping)) +\nggplot(weightedavs.gva.cp %&gt;% filter(region_grouping!='London'), aes(x = year, y = prop_diff * 100, colour = region_grouping)) +\n# ggplot(weightedavs %&gt;% filter(region_grouping!='London', !is.na(prop_diff_5yrsmooth)), aes(x = year, y = prop_diff_5yrsmooth * 100, colour = region_grouping)) +\n# ggplot(weightedavs, aes(x = year, y = prop_diff * 100, colour = region_grouping)) +\n  geom_line() +\n  geom_point(size = 2) +\n  # coord_cartesian(ylim = c(-1,30)) +\n  geom_hline(yintercept = 0, alpha = 0.2, size = 2) \n\n\n\n#COMPARE THE MCAS DIRECTLY\n#MCA to get proportion gaps to others\ncomparator = perhourworked.withtotalhours$region[grepl('South Y', perhourworked.withtotalhours$region, ignore.case = T)] %&gt;% unique\n# comparator = perhourworked.withtotalhours$region[grepl('Greater M', perhourworked.withtotalhours$region, ignore.case = T)] %&gt;% unique\n\nmcacompare &lt;- gva.cp %&gt;%\n  select(region, year, gva_per_capita) %&gt;% \n  filter(region %in% mcas[mcas!=comparator]) %&gt;%\n  left_join(\n    gva.cp %&gt;%\n      ungroup() %&gt;% \n      filter(region == comparator) %&gt;% \n      select(year, SY_gva = gva_per_capita),\n  by = 'year'\n  ) %&gt;% \n  mutate(prop_diff = (gva_per_capita - SY_gva)/SY_gva) %&gt;% \n  group_by(region) %&gt;% \n  mutate(\n    prop_diff_3yrsmooth = rollapply(prop_diff,3,mean,align='center',fill=NA),\n    prop_diff_5yrsmooth = rollapply(prop_diff,5,mean,align='center',fill=NA),\n  )\n\n\n\n# ggplot(corecompare, aes(x = year, y = prop_diff_5yrsmooth * 100, colour = fct_reorder(region, prop_diff_5yrsmooth))) +\nggplot(mcacompare, aes(x = year, y = prop_diff * 100, colour = fct_reorder(region, prop_diff))) +\n  geom_line() +\n  geom_point(size = 2) +\n  # coord_cartesian(ylim = c(-1,30)) +\n  geom_hline(yintercept = 0, alpha = 0.2, size = 2) +\n  scale_color_brewer(palette = 'Paired')"
  },
  {
    "objectID": "gdp_gaps.html#repeat-per-capita-for-itl3",
    "href": "gdp_gaps.html#repeat-per-capita-for-itl3",
    "title": "GDP/GVA regional gaps in the UK",
    "section": "REPEAT PER CAPITA FOR ITL3",
    "text": "REPEAT PER CAPITA FOR ITL3\n\n#Get population numbers for per person figures\n#From regionalgrossvalueaddedbalancedbyindustryandallitlregions.xlsx\n#ONS mid year population estimates\n#Table 6 (not sure where they got consistent ITL2 geogs from...)\npersoncounts.itl3 &lt;- read_csv('data/Table 6 Total resident population numbers persons.csv') %&gt;% \n  rename(ITLcode = `ITL code`, region = `Region name`) %&gt;% \n  filter(ITL == 'ITL3') %&gt;% \n  pivot_longer(cols = `1998`:`2021`, names_to = 'year', values_to = 'personcount') %&gt;% \n  mutate(year = as.numeric(year))\n\n#Total GVA in current basic prices from the same source\ngva.cp.itl3 &lt;- read_csv('data/Table 1 GVA balanced at current basic prices millions.csv') %&gt;% \n  rename(ITLcode = `ITL code`, region = `Region name`) %&gt;% \n  filter(ITL == 'ITL3') %&gt;% \n  pivot_longer(cols = `1998`:`2021`, names_to = 'year', values_to = 'gva') %&gt;% \n  mutate(year = as.numeric(year))\n\n#Add person counts in to get GVA per capita\n#Check link match... tick\ntable(personcounts.itl3$region %in% gva.cp.itl3$region)\n\n\nTRUE \n4296 \n\ngva.cp.itl3 &lt;- gva.cp.itl3 %&gt;% \n  left_join(\n    personcounts.itl3 %&gt;% select(region, year, personcount),\n    by = c('region','year')\n  ) %&gt;% \n  mutate(\n    gva_per_capita = (gva / personcount) * 1000000\n    )\n\n\n\n#Use matching part ITL2 code to add region labels in\ngva.cp.itl3 &lt;- gva.cp.itl3 %&gt;% \n  mutate(\n    ITL2code = str_sub(gva.cp.itl3$ITLcode,1,-2)\n  )\n\n#Merge in region labels from the ITL2 data\ngva.cp.itl3 &lt;- gva.cp.itl3 %&gt;% \n  left_join(\n    gva.cp %&gt;% ungroup() %&gt;% distinct(ITLcode, ns_england_restofUK, ns_england_restofUK_londonseparate) %&gt;% select(ITL2code = ITLcode, ns_england_restofUK, ns_england_restofUK_londonseparate),\n    by = 'ITL2code'\n  )\n\n#Add in an extra one for the shortlist of 11 'core cities'\n#Belfast, Birmingham, Bristol, Cardiff, Glasgow, Leeds, Liverpool, Manchester, Newcastle, Nottingham, Sheffield\n#https://www.corecities.com/about-us/what-core-cities-uk\ngva.cp.itl3 &lt;- gva.cp.itl3 %&gt;% \n  mutate(\n    core_cities = ifelse(region %in% corecities, 'Core city', 'Other'),\n    core_cities_minus_sheffield = ifelse(region %in% corecities[corecities!='Sheffield'],'Core city (exc. Sheffield)','Other')#without sheffield, so not including in weighted average\n    )\n\n\n\n#Changing ranks\ngva.cp.itl3 &lt;- gva.cp.itl3 %&gt;% \n  group_by(year) %&gt;% \n  mutate(rank = rank(gva_per_capita))\n\n#3 year smoothing\ngva.cp.itl3 &lt;- gva.cp.itl3 %&gt;% \n  arrange(year) %&gt;% \n  group_by(region) %&gt;%\n  mutate(\n    movingav = rollapply(gva_per_capita,3,mean,align='center',fill=NA),\n    rank_movingav = rollapply(rank,3,mean,align='center',fill=NA)\n    )\n\n\n#Highlight Sheffield and BDR\ngva.cp.itl3 &lt;- gva.cp.itl3 %&gt;% \n  mutate(selectedregion = grepl('Sheffield|Barnsley', region, ignore.case = T))\n\n#Plot: first coalition years to pre covid\n# p &lt;- ggplot(gva.cp.itl3 %&gt;% filter(year %in% c(1999,2006,2012,2018)), aes(x = factor(year), y = rank_movingav, group = region, color = factor(year))) +\np &lt;- ggplot(gva.cp.itl3 %&gt;% filter(year %in% c(1999,2018)), aes(x = factor(year), y = rank_movingav, group = region, color = factor(year))) +\n  geom_line(aes(group = region), color = \"grey44\") +\n  geom_point(aes(shape = selectedregion, size = selectedregion)) +\n  facet_wrap(vars(ns_england_restofUK_londonseparate), nrow = 1) +\n  ylab('rank (3 year average)') +\n  xlab('year (average centre)') +\n  guides(colour=\"none\", shape = \"none\", size = \"none\") +\n  theme_bw()\n\nggplotly(p, tooltip = c('region','rank_movingav'))\n\n\n\n\n\nProportion diffs for ITL3 GVA per capita\n\n#For region grouping... Weight averages by population\nweightedaverages.gva.cp.itl3.regions &lt;- gva.cp.itl3 %&gt;% \n  rename(region_grouping = ns_england_restofUK_londonseparate) %&gt;% \n  group_by(region_grouping,year) %&gt;%\n  summarise(\n    weighted_mean_gva = weighted.mean(gva_per_capita, personcount, na.rm=T)#get weighted average by each ITL2 grouping\n  ) %&gt;% #merge in SY values\n  left_join(gva.cp.itl3 %&gt;% filter(region == 'Sheffield') %&gt;% ungroup() %&gt;% select(year, Sheffield_gva = gva_per_capita), by = c('year')) %&gt;% \n  left_join(gva.cp.itl3 %&gt;% filter(grepl(x = region, pattern = 'Barnsley', ignore.case = T)) %&gt;% ungroup() %&gt;% select(year, BDR_gva = gva_per_capita), by = c('year')) \n\n#Repeat for core cities exc Sheffield\nweightedaverages.gva.cp.itl3.cores &lt;- gva.cp.itl3 %&gt;% \n  rename(region_grouping = core_cities_minus_sheffield) %&gt;% \n  group_by(region_grouping,year) %&gt;%\n  summarise(\n    weighted_mean_gva = weighted.mean(gva_per_capita, personcount, na.rm=T)#get weighted average by each ITL2 grouping\n  ) %&gt;% #merge in SY values\n  left_join(gva.cp.itl3 %&gt;% filter(region == 'Sheffield') %&gt;% ungroup() %&gt;% select(year, Sheffield_gva = gva_per_capita), by = c('year')) %&gt;% \n  left_join(gva.cp.itl3 %&gt;% filter(grepl(x = region, pattern = 'Barnsley', ignore.case = T)) %&gt;% ungroup() %&gt;% select(year, BDR_gva = gva_per_capita), by = c('year')) \n\n\n#Append those two\nweightedavs.gva.cp.itl3 &lt;- rbind(\n  weightedaverages.gva.cp.itl3.regions,\n  weightedaverages.gva.cp.itl3.cores %&gt;% filter(region_grouping!='Other')\n)\n\n#Make Sheffield and BDR gva long, and find proportion diffs\nweightedavs.gva.cp.itl3 &lt;- weightedavs.gva.cp.itl3 %&gt;% \n  pivot_longer(cols = Sheffield_gva:BDR_gva, names_to = 'place', values_to = 'gva') %&gt;% \n  mutate(\n    prop_diff = (weighted_mean_gva - gva)/gva\n  ) %&gt;% \n  arrange(year) %&gt;% \n  group_by(region_grouping,place) %&gt;% \n  mutate(\n    prop_diff_3yrsmooth = rollapply(prop_diff,3,mean,align='center',fill=NA),\n    prop_diff_5yrsmooth = rollapply(prop_diff,5,mean,align='center',fill=NA),\n  )\n\n#Plain prop diff looks smoothed already I think... \n# ggplot(weightedavs.gva.cp.itl3, aes(x = year, y = prop_diff * 100, colour = region_grouping)) +\nggplot(weightedavs.gva.cp.itl3 %&gt;% filter(region_grouping!='London'), aes(x = year, y = prop_diff * 100, colour = region_grouping)) +\n# ggplot(weightedavs.itl3 %&gt;% filter(region_grouping!='London', !is.na(prop_diff_5yrsmooth)), aes(x = year, y = prop_diff_5yrsmooth * 100, colour = region_grouping)) +\n# ggplot(weightedavs.itl3, aes(x = year, y = prop_diff * 100, colour = region_grouping)) +\n  geom_line() +\n  geom_point(size = 2) +\n  # coord_cartesian(ylim = c(-1,30)) +\n  geom_hline(yintercept = 0, alpha = 0.2, size = 2) +\n  facet_wrap(~place)\n\n\n\n#VERSION TO DIRECTLY COMPARE SHEFFIELD TO OTHER 'CORE CITIES'\n#Exclude Sheffield, as we want % diff for Sheffield, will add as own column\n#Don't need hours per week as using direct GVA comparison, no need for weighted av\ncomparator = 'Sheffield'\n# comparator = 'Manchester'\n# comparator = 'Leeds'\n# comparator = 'Nottingham'\n\ncorecompare &lt;- gva.cp.itl3 %&gt;%\n  select(region, year, gva_per_capita) %&gt;% \n  filter(region %in% corecities[corecities!=comparator]) %&gt;%\n  left_join(\n    gva.cp.itl3 %&gt;%\n      ungroup() %&gt;% \n      filter(region == comparator) %&gt;% \n      select(year, sheffield_gva = gva_per_capita),\n  by = 'year'\n  ) %&gt;% \n  mutate(prop_diff = (gva_per_capita - sheffield_gva)/sheffield_gva) %&gt;% \n  group_by(region) %&gt;% \n  mutate(\n    prop_diff_3yrsmooth = rollapply(prop_diff,3,mean,align='center',fill=NA),\n    prop_diff_5yrsmooth = rollapply(prop_diff,5,mean,align='center',fill=NA),\n  )\n\n\n\n# ggplot(corecompare, aes(x = year, y = prop_diff_5yrsmooth * 100, colour = fct_reorder(region, prop_diff_5yrsmooth))) +\nggplot(corecompare, aes(x = year, y = prop_diff * 100, colour = fct_reorder(region, prop_diff))) +\n  geom_line() +\n  geom_point(size = 2) +\n  # coord_cartesian(ylim = c(-1,30)) +\n  geom_hline(yintercept = 0, alpha = 0.2, size = 2) +\n  scale_color_brewer(palette = 'Paired')\n\n\n\n#Just look at Manc / Sheffield raw\nView(gva.cp.itl3 %&gt;% filter(region %in% c('Manchester','Sheffield')))"
  },
  {
    "objectID": "index.html#what-is-this-website",
    "href": "index.html#what-is-this-website",
    "title": "UK regional economics tools, analysis and ideas",
    "section": "",
    "text": "A repository of tools, methods and ideas for analysing UK regional economic data, mainly from official ONS sources.\nWith the aim of:\nSupporting policymakers to more clearly see what’s happening in their regional economies, what their history is, how they compare to other places in the UK, and what the main method issues are when interpreting the data.\nHelping to build capacity ‘in-house’ so regional policymakers can become more self-reliant (see Centre for Cities’ report LA Evidential for excellent analysis of how to overcome barriers to regional capacity building.)\nThis is a live document and will continue to grow in dialogue with its users.\n\nCurrent website content (see table of content links on the left):\n\nGDP and GVA:\n\nGDP / GVA regional gaps in the UK: analysis and R code for comparing different types of economic gap between places, showing what difference choice of data makes.\nBeatty & Fothergill analysis of productivity: visualisations based on the CRESR report ‘Productivity of Industry and Places’, showing how much the economic gap between places changes depending on a range of data choices.\n\nSectors:\n\nLQ and proportion plots: code and method showing how to analysis sectoral composition in regions and how they compare to other places, using location quotients, mapping and ‘proportion plots’ that get under the skin of what LQs are showing.\n\n\nThis project was funded by Y-PERN and supported SYMCA’s Plan for Good Growth and Skills Strategy 2024.\nAny questions, please do get in touch via the issues tab on the github repo of this website or email: danolner at gmail dot com or d dot olner at sheffield.ac.uk."
  },
  {
    "objectID": "quarto_docs/SectorGrowthInvestment_July2024.html",
    "href": "quarto_docs/SectorGrowthInvestment_July2024.html",
    "title": "SectorGrowthInvestment_July2024",
    "section": "",
    "text": "library(flextable)\n\n\nIntroduction\nThis short report asks: how might the economic value of South Yorkshire change given different sector investment?"
  }
]